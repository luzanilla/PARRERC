/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import entidades.Escuela;
import entidades.ModeloExamen;
import entidades.Turno;
import entidades.ZonaEscolar;
import java.awt.Color;
import java.awt.Dimension;
import java.io.File;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author UEE
 */
public class InformeInspectores extends javax.swing.JInternalFrame {

    private Color[] colores = {new Color(79, 129, 189), new Color(246, 192, 29), new Color(142, 188, 8), new Color(255, 145, 75), new Color(216, 81, 81), new Color(149, 81, 149), new Color(93, 137, 45), new Color(10, 146, 146)};
    private List<ModeloExamen> modelosExamenes;
    
    private int i_modelo;
    private int i_municipio;
    private int i_zona_escolar;
    
    private String modelo;
    private String municipio;
    private String zona_escolar;
    
    private double promedio_zona;
    private double porcentaje_aciertos_zona;
    
    private double promedio_municipio;
    private double porcentaje_aciertos_municipio;
    
    private JFreeChart grafica_zona; 
    private JFreeChart grafica_municipio;
    private List<JFreeChart> graficas_zona_ua;
    private JFreeChart grafica_municipio_ua;
    
    /**
     * Creates new form InformeInspectores
     */
    public InformeInspectores(List<ModeloExamen> modelosExamenes, JDesktopPane jDesktopPane1) {
        this.modelosExamenes = modelosExamenes;
        initComponents();
        
        llenarSelects();
        
        this.jDialog1.pack();
        this.jDialog1.setLocationRelativeTo(null);
        this.jDialog1.setVisible(true);
        
        Dimension desktopSize = jDesktopPane1.getSize();
        Dimension jInternalFrameSize = this.getSize();

        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2, (desktopSize.height- jInternalFrameSize.height)/2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        combo_modelo = new javax.swing.JComboBox();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        combo_zona = new javax.swing.JComboBox();
        jPanel8 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        combo_municipio = new javax.swing.JComboBox();
        jPanel7 = new javax.swing.JPanel();
        botonAceptar = new javax.swing.JButton();
        botonCancelar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        panel_resultados = new javax.swing.JEditorPane();

        jDialog1.setTitle("Informe de resultados para inspectores de zona escolar");
        jDialog1.setBounds(new java.awt.Rectangle(0, 0, 0, 400));
        jDialog1.setModal(true);
        jDialog1.setPreferredSize(new java.awt.Dimension(510, 400));
        jDialog1.setResizable(false);

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(214, 217, 223));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Los inspectores de zona escolar forman parte del equipo directivo de la escuela. Son profesionales, que cumplen con tareas de orientación administrativa y académica como la asesoría, orientación, evaluación y guía a los directores y profesores de un grupo de escuelas asignadas, con el objetivo de hacer que se cumpla la normatividad del ofrecimiento de los servicios escolares a la comunidad.\n\nLos equipos directivos tienen la función de ser gestores autónomos que promueven la toma de decisiones al interior de las escuelas de manera participativa y colaborativa, con el fin de buscar la mejora en la calidad del aprendizaje de los alumnos de los establecimientos.");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Los inspectores", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        jTextArea1.setFocusable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel4.setText("Modelo de examen:");

        combo_modelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_modeloActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 35, Short.MAX_VALUE))
                    .addComponent(combo_modelo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(combo_modelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel5.setText("Zona escolar:");

        combo_zona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_zonaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 24, Short.MAX_VALUE))
                    .addComponent(combo_zona, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(combo_zona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel6.setText("Municipio:");

        combo_municipio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_municipioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 82, Short.MAX_VALUE))
                    .addComponent(combo_municipio, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(combo_municipio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        botonAceptar.setText("Aceptar");
        botonAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAceptarActionPerformed(evt);
            }
        });

        botonCancelar.setText("Cancelar");
        botonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addComponent(botonAceptar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(127, 127, 127))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonAceptar)
                    .addComponent(botonCancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextArea1))
                .addContainerGap())
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextArea1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Informe de resultados para inspectores de zona escolar");

        panel_resultados.setEditable(false);
        panel_resultados.setContentType("text/html");
        jScrollPane1.setViewportView(panel_resultados);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void combo_modeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_modeloActionPerformed
        int indice_seleccionado = this.combo_modelo.getSelectedIndex();

        //Llenamos el combo de Municipio
        //this.combo_municipio.removeAllItems();
        DefaultComboBoxModel model_municipio = new DefaultComboBoxModel(this.modelosExamenes.get(indice_seleccionado).getOpciones_respuesta_municipio().toArray());
        this.combo_municipio.setModel(model_municipio);

        //Llenamos el cobo de Zona Escolar
        //this.combo_zona.removeAllItems();
        DefaultComboBoxModel model_zona = new DefaultComboBoxModel();

        for(int i=0; i<this.modelosExamenes.get(indice_seleccionado).getZona_escolar_por_municipio()[0].size(); i++) {
            model_zona.addElement(this.modelosExamenes.get(indice_seleccionado).getZona_escolar_por_municipio()[0].get(i).getNombre_zona_escolar());
        }

        this.combo_zona.setModel(model_zona);        

    }//GEN-LAST:event_combo_modeloActionPerformed

    private void combo_zonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_zonaActionPerformed
        int indice_seleccionado = this.combo_modelo.getSelectedIndex();
        int municipio_seleccionado = this.combo_municipio.getSelectedIndex();
        int zona_seleccionada = this.combo_zona.getSelectedIndex();        

    }//GEN-LAST:event_combo_zonaActionPerformed

    private void combo_municipioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_municipioActionPerformed
        int indice_seleccionado = this.combo_modelo.getSelectedIndex();
        int municipio_seleccionado = this.combo_municipio.getSelectedIndex();

        //Llenamos el cobo de Zona Escolar
        //this.combo_zona.removeAllItems();
        DefaultComboBoxModel model_zona = new DefaultComboBoxModel();

        for(int i=0; i<this.modelosExamenes.get(indice_seleccionado).getZona_escolar_por_municipio()[municipio_seleccionado].size(); i++) {
            model_zona.addElement(this.modelosExamenes.get(indice_seleccionado).getZona_escolar_por_municipio()[municipio_seleccionado].get(i).getNombre_zona_escolar());
        }

        this.combo_zona.setModel(model_zona);       

    }//GEN-LAST:event_combo_municipioActionPerformed

    private void botonAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAceptarActionPerformed
        this.modelo = (String) this.combo_modelo.getSelectedItem();
        this.i_modelo = this.combo_modelo.getSelectedIndex();

        this.municipio = (String) this.combo_municipio.getSelectedItem();
        this.i_municipio = this.combo_municipio.getSelectedIndex();

        this.zona_escolar = (String) this.combo_zona.getSelectedItem();
        this.i_zona_escolar = this.combo_zona.getSelectedIndex();        

        this.promedio_municipio = this.modelosExamenes.get(this.i_modelo).getPuntaje_promedio_municipio().get(i_municipio);
        this.porcentaje_aciertos_municipio = this.modelosExamenes.get(this.i_modelo).getPorcentaje_aciertos_municipio().get(i_municipio);

        this.promedio_zona = this.modelosExamenes.get(this.i_modelo).getZona_escolar_por_municipio()[i_municipio].get(i_zona_escolar).getPuntaje_promedio_zona_escolar();
        this.porcentaje_aciertos_zona = this.modelosExamenes.get(this.i_modelo).getZona_escolar_por_municipio()[i_municipio].get(i_zona_escolar).getPorcentaje_aciertos_zona_escolar();

        crearGraficas();
        guardarImagenes();

        pintarResultados();

        this.jDialog1.setVisible(false);
        this.setVisible(true);
    }//GEN-LAST:event_botonAceptarActionPerformed

    private void botonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarActionPerformed
        this.jDialog1.setVisible(false);
    }//GEN-LAST:event_botonCancelarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAceptar;
    private javax.swing.JButton botonCancelar;
    private javax.swing.JComboBox combo_modelo;
    private javax.swing.JComboBox combo_municipio;
    private javax.swing.JComboBox combo_zona;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JEditorPane panel_resultados;
    // End of variables declaration//GEN-END:variables

    private void crearGraficas() {                       
        crearGraficaZona();
        crearGraficaMunicipio();
        crearGraficaZonaUA(); 
        crearGraficaMunicipioUA();
    }
    
    private void crearGraficaZona() {
        //Creamos las graficas por escuela y turno        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();        

        for(int m=0; m<this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i_municipio].get(i_zona_escolar).getEscuelas().size(); m++) {
            String nombre_escuela = this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i_municipio].get(i_zona_escolar).getEscuelas().get(m).getId_escuela();                                

            for(int n=0; n<this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i_municipio].get(i_zona_escolar).getEscuelas().get(m).getTurnos().size(); n++) {
                String nombre_turno = this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i_municipio].get(i_zona_escolar).getEscuelas().get(m).getTurnos().get(n).getId_turno();
                dataset.setValue(this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i_municipio].get(i_zona_escolar).getEscuelas().get(m).getTurnos().get(n).getPorcentaje_aciertos_turno(), nombre_turno, nombre_escuela);
            }

        }
        
        String titulo = "Zona " + this.zona_escolar + ", Municipio " + this.municipio;
        grafica_zona = ChartFactory.createBarChart(titulo, "Escuelas", "Porcentaje", dataset, PlotOrientation.VERTICAL, true, true, true);

        grafica_zona.setBackgroundPaint(Color.white);

        final CategoryPlot plot = (CategoryPlot) grafica_zona.getPlot();

        plot.setBackgroundPaint(new Color(240, 240, 240));
        plot.setRangeGridlinePaint(Color.darkGray);
        plot.setRangeGridlinesVisible(true);
        plot.setDomainGridlinePaint(Color.darkGray);            

        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setUpperBound(105);

        // customise the renderer...
        final BarRenderer renderer = (BarRenderer) plot.getRenderer();        
        //renderer.setDrawShapes(true);            
        renderer.setMaximumBarWidth(.2);   
        renderer.setItemMargin(.015);

        for(Escuela esc : this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i_municipio].get(i_zona_escolar).getEscuelas()) {
            for(int j=0; j<esc.getTurnos().size(); j++) {  
                renderer.setSeriesPaint(j, colores[j]);
                renderer.setSeriesItemLabelGenerator(j, new StandardCategoryItemLabelGenerator());
                renderer.setSeriesItemLabelsVisible(j, true);                        
                renderer.setSeriesVisible(j, true);
            }
        }                   

        plot.setRenderer(renderer);
    }

    private void crearGraficaMunicipio() {
        //Creamos las graficas por grupo        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();        

        for(int m=0; m<this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i_municipio].size(); m++) {
            String nombre_zona = this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i_municipio].get(m).getNombre_zona_escolar();
            
            dataset.setValue(this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i_municipio].get(m).getPorcentaje_aciertos_zona_escolar(), "Porcentaje de aciertos", nombre_zona);            
        }
        
        grafica_municipio = ChartFactory.createBarChart("Municipio " + this.municipio, "Zona Escolar", "Porcentaje", dataset, PlotOrientation.VERTICAL, false, true, true);

        grafica_municipio.setBackgroundPaint(Color.white);

        final CategoryPlot plot = (CategoryPlot) grafica_municipio.getPlot();

        plot.setBackgroundPaint(new Color(240, 240, 240));
        plot.setRangeGridlinePaint(Color.darkGray);
        plot.setRangeGridlinesVisible(true);
        plot.setDomainGridlinePaint(Color.darkGray);            

        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setUpperBound(105);

        // customise the renderer...
        final BarRenderer renderer = (BarRenderer) plot.getRenderer();        
        //renderer.setDrawShapes(true);            
        renderer.setMaximumBarWidth(.2);   
        renderer.setItemMargin(.015);

        int j=0;
        
        for(Escuela esc : this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i_municipio].get(i_zona_escolar).getEscuelas()) {            
            renderer.setSeriesPaint(j, colores[j]);
            renderer.setSeriesItemLabelGenerator(j, new StandardCategoryItemLabelGenerator());
            renderer.setSeriesItemLabelsVisible(j, true);                        
            renderer.setSeriesVisible(j, true);            
            
            j++;
        }                   

        plot.setRenderer(renderer); 
    }

    private void crearGraficaZonaUA() {
        //Graficas por turno y unidad de aprendizaje
        graficas_zona_ua = new ArrayList<>();
               
        for(int m=0; m<this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i_municipio].get(i_zona_escolar).getEscuelas().size(); m++) {
            String nombre_escuela = this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i_municipio].get(i_zona_escolar).getEscuelas().get(m).getId_escuela();                                
            //Creamos las graficas por grupo por unidad de aprendizaje        
            DefaultCategoryDataset dataset = new DefaultCategoryDataset(); 

            for(int n=0; n<this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i_municipio].get(i_zona_escolar).getEscuelas().get(m).getTurnos().size(); n++) {
                String nombre_turno = this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i_municipio].get(i_zona_escolar).getEscuelas().get(m).getTurnos().get(n).getId_turno();

                for(int i=0; i<this.modelosExamenes.get(i_modelo).getUnidades_aprendizaje().size(); i++) {
                    String nombre_ua = this.modelosExamenes.get(i_modelo).getUnidades_aprendizaje().get(i).getNombre();
                    dataset.setValue(this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i_municipio].get(i_zona_escolar).getEscuelas().get(m).getTurnos().get(n).getPorcentajes_aciertos_ua()[i], nombre_turno, nombre_ua);
                }                                                            
            }
                        
            JFreeChart grafica = ChartFactory.createBarChart("Escuela " + nombre_escuela, "Unidades de aprendizaje", "Porcentaje", dataset, PlotOrientation.VERTICAL, true, true, true);
            grafica.setBackgroundPaint(Color.white);

            final CategoryPlot plot = (CategoryPlot) grafica.getPlot();

            plot.setBackgroundPaint(new Color(240, 240, 240));
            plot.setRangeGridlinePaint(Color.darkGray);
            plot.setRangeGridlinesVisible(true);
            plot.setDomainGridlinePaint(Color.darkGray);            

            final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
            rangeAxis.setUpperBound(105);

            // customise the renderer...
            final BarRenderer renderer = (BarRenderer) plot.getRenderer();        
            //renderer.setDrawShapes(true);
            renderer.setSeriesPaint(0, new Color(79, 129, 189));
            renderer.setMaximumBarWidth(.15);
            renderer.setItemMargin(.02);

            for(Escuela esc : this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i_municipio].get(i_zona_escolar).getEscuelas()) {
                for(int j=0; j<esc.getTurnos().size(); j++) {  
                    renderer.setSeriesPaint(j, colores[j]);
                    renderer.setSeriesItemLabelGenerator(j, new StandardCategoryItemLabelGenerator());
                    renderer.setSeriesItemLabelsVisible(j, true);                        
                    renderer.setSeriesVisible(j, true);
                }
            }                     

            plot.setRenderer(renderer);
            
            graficas_zona_ua.add(grafica);
        }
    }

    private void crearGraficaMunicipioUA() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();             
        
        //Graficas por turno y unidad de aprendizaje               
        for(int m=0; m<this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i_municipio].size(); m++) {
            String nombre_zona = this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i_municipio].get(m).getNombre_zona_escolar();                                
            //Creamos las graficas por grupo por unidad de aprendizaje                    
            
            for(int i=0; i<this.modelosExamenes.get(i_modelo).getUnidades_aprendizaje().size(); i++) {
                String nombre_ua = this.modelosExamenes.get(i_modelo).getUnidades_aprendizaje().get(i).getNombre();
                dataset.setValue(this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i_municipio].get(m).getPorcentajes_aciertos_ua()[i], nombre_zona, nombre_ua);
            }
                                               
        }
        
        grafica_municipio_ua = ChartFactory.createBarChart("Municipio " + this.municipio, "Unidades de aprendizaje", "Porcentaje", dataset, PlotOrientation.VERTICAL, true, true, true);
        grafica_municipio_ua.setBackgroundPaint(Color.white);

        final CategoryPlot plot = (CategoryPlot) grafica_municipio_ua.getPlot();

        plot.setBackgroundPaint(new Color(240, 240, 240));
        plot.setRangeGridlinePaint(Color.darkGray);
        plot.setRangeGridlinesVisible(true);
        plot.setDomainGridlinePaint(Color.darkGray);            

        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setUpperBound(105);

        // customise the renderer...
        final BarRenderer renderer = (BarRenderer) plot.getRenderer();        
        //renderer.setDrawShapes(true);
        renderer.setSeriesPaint(0, new Color(79, 129, 189));
        renderer.setMaximumBarWidth(.2);
        renderer.setItemMargin(.015);

        int j=0;

        for(ZonaEscolar ze : this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i_municipio]) {            
            renderer.setSeriesPaint(j, colores[j]);
            renderer.setSeriesItemLabelGenerator(j, new StandardCategoryItemLabelGenerator());
            renderer.setSeriesItemLabelsVisible(j, true);                        
            renderer.setSeriesVisible(j, true);            

            j++;
        }                     

        plot.setRenderer(renderer); 
    }

    private void guardarImagenes() {
        File dir = new File("temp\\inf_inspectores");                
        
        if(dir.exists()) {
            borrarDirectorio(dir);                                   
        }        
        
        if (dir.mkdirs()) {                                                                                               
            
            try {                        
                ChartUtilities.saveChartAsPNG(new java.io.File("temp\\inf_inspectores\\escuelas_zona.PNG"), grafica_zona, 500, 300);                                                
                
                ChartUtilities.saveChartAsPNG(new java.io.File("temp\\inf_inspectores\\zonas_municipio.PNG"), grafica_municipio, 500, 300);                                                
                
                for(int i=0; i<this.graficas_zona_ua.size(); i++) {
                    ChartUtilities.saveChartAsPNG(new java.io.File("temp\\inf_inspectores\\escuelas_zona_ua" + i + ".PNG"), graficas_zona_ua.get(i), 500, 300);                                                
                }
                
                ChartUtilities.saveChartAsPNG(new java.io.File("temp\\inf_inspectores\\zonas_municpio_ua.PNG"), grafica_municipio_ua, 500, 300);                                                
                
            } catch (java.io.IOException exc) {
                JOptionPane.showMessageDialog(this, "Error al guardar las imagenes.", "Error", JOptionPane.ERROR_MESSAGE);                            

            }     
            
            
        } else {
            JOptionPane.showMessageDialog(this, "Error al crear el directorio temporal para imagenes.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void pintarResultados() {
        DecimalFormat df = new DecimalFormat("0.000");
        
        String out = "<table align\"center\" width=\"80%\" border=\"0\" cellspacing=\"10px\" cellpadding=\"0\">";
        out = out + "<tr>"
                    + "<th scope=\"col\"><h2>Informe de resultados generales para Inspectores de zona escolar.</h2></th>"
                + "  </tr>";
       
        //Abrimos renglón de la tabla principal
        out = out + "<tr>";
        out = out + "<td>"; 
        
        out = out + "<table align=\"center\" width=\"60%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">";                
        out = out + "<tr>";
        out = out + "<td>En la Zona Escolar n&uacute;mero <strong>" + this.zona_escolar + "</strong> del municipio de <strong>" + this.municipio + "</strong> la media de puntaje global fue de <strong>" + df.format(this.promedio_zona) + "</strong>. <br /> Los resultados generales que se presentan son los promedios totales y porcentuales desagregados por zona escolar, escuela y turno de la poblaci&oacute;n estudiantil examinada. <br />La media de puntaje  del municipio de <strong>" + this.municipio + "</strong> es de <strong>" + df.format(this.promedio_municipio) + "</strong>, al comparar este dato con el desempe&ntilde;o de cada zona escolar se observa que <strong>" + getNumZonasBajoMedia() + "</strong> zonas se encuentran por debajo del promedio, mientras que <strong>" + getNumZonasSobreMedia() + "</strong> se encuentran por encima del promedio.</td>";        
        out = out + "</tr>";
        out = out + "</table>";
        
        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>";                                                                                                                             
        
        //abrimos renglón de tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; border:0;\">";        
        
        //Imprimimos la tabla con los puntajes de los grupos de la escuela seleccionada
        out = out +
                "<table align=\"center\" width=\"50%\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">"                 
                + "<caption style=\"text-align:left; font-weight:bold; font-size: 9px;\">Tabla 1. Resultados generales de las escuelas de la Zona Escolar " + this.zona_escolar + " del municipio de " + this.municipio + ".</caption>"
                + "<tr>";

        out = out + "<td style=\"text-align:center; font-weight:bold;\">Escuela</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Turno</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Promedio</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Porcentaje</td>";
        out = out + "</tr>";    
                         
        for(int x=0; x<this.modelosExamenes.get(this.i_modelo).getZona_escolar_por_municipio()[this.i_municipio].get(this.i_zona_escolar).getEscuelas().size(); x++) {                             
            Escuela esc = this.modelosExamenes.get(this.i_modelo).getZona_escolar_por_municipio()[this.i_municipio].get(this.i_zona_escolar).getEscuelas().get(x);                                                    
            out = out + "<tr>";  
            out = out + "<td style=\"text-align:center; font-weight:bold;\" rowspan=\"" + (esc.getTurnos().size()+1) + "\">" + esc.getId_escuela() + "</td>";
        
            for(int o=0; o<esc.getTurnos().size(); o++) {
                Turno tur = esc.getTurnos().get(o);                                                    

                if(o!=0) {
                    out = out + "<tr>";
                }
                
                out = out + "<td style=\"text-align:left;\">" + tur.getId_turno() + " </td>";
                out = out + "<td style=\"text-align:center;\">" + df.format(tur.getPuntaje_promedio_turno()) + "</td>";
                out = out + "<td style=\"text-align:center;\">" + df.format(tur.getPorcentaje_aciertos_turno()) + "%</td>";   
                
                out = out + "</tr>";
            }
            
            out = out + "<tr>";
            out = out + "<td style=\"text-align:center; font-weight:bold;\">Total escuela</td>";
            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + df.format(esc.getPuntaje_promedio_escuela()) + "</td>";
            out = out + "<<td style=\"text-align:center; font-weight:bold;\">" + df.format(esc.getPorcentaje_aciertos_escuela()) + "%</td>";   
            out = out + "</tr>";            
        }                                                                        

        out = out + "<tr>";
        out = out + "<td colspan=\"2\" style=\"text-align:center; font-weight:bold;\">Total zona escolar:</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">" + df.format(this.promedio_zona) + "</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">" + df.format(this.porcentaje_aciertos_zona) + "%</td>";
        out = out + "</tr>";
        
        out = out + "</table>";
        out = out + "<br /><br />";                                                                                              

        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>";                                         
                        
        //abrimos renglón de tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; border:0;\">";
        
        //Imprimimos gráfica de los grupos de una escuela.
        String nombreArchivo = "\"file:temp/inf_inspectores/escuelas_zona.PNG\"";
        out = out + "<img src=" + nombreArchivo + " width=\"500\" height=\"300\" border=\"0\">";
        out = out + "<br /><br />";

        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>";         
        
        //abrimos renglón de tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; border:0;\">";        
        
        //Imprimimos la tabla con los puntajes de las zonas escolares del municipio seleccionado
        out = out +
                "<table align=\"center\" width=\"50%\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">"                 
                + "<caption style=\"text-align:left; font-weight:bold; font-size: 9px;\">Tabla 2. Resultados generales del municipio de " + this.municipio + " por Zona Escolar.</caption>"
                + "<tr>";
        
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Zona Escolar</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Promedio</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Porcentaje</td>";
        out = out + "</tr>";    
                         
        for(int x=0; x<this.modelosExamenes.get(this.i_modelo).getZona_escolar_por_municipio()[this.i_municipio].size(); x++) {                             
            ZonaEscolar ze = this.modelosExamenes.get(this.i_modelo).getZona_escolar_por_municipio()[this.i_municipio].get(x);
            
            out = out + "</tr>"; 
            out = out + "<td style=\"text-align:left;\">" + ze.getNombre_zona_escolar() + " </td>";
            out = out + "<td style=\"text-align:center;\">" + df.format(ze.getPuntaje_promedio_zona_escolar()) + "</td>";
            out = out + "<td style=\"text-align:center;\">" + df.format(ze.getPorcentaje_aciertos_zona_escolar()) + "%</td>";   
            out = out + "</tr>";                        
        }                          

        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Total municipio:</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">" + df.format(this.promedio_municipio) + "</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">" + df.format(this.porcentaje_aciertos_municipio*100) + "%</td>";
        out = out + "</tr>";
        
        out = out + "</table>";
        out = out + "<br /><br />";

        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>";    
        
        //abrimos renglón de tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; border:0;\">";
        
        //Imprimimos gráfica de los grupos de una escuela.
        nombreArchivo = "\"file:temp/inf_inspectores/zonas_municipio.PNG\"";
        out = out + "<img src=" + nombreArchivo + " width=\"500\" height=\"300\" border=\"0\">";
        out = out + "<br /><br />";

        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>"; 
                                
        //Informe de resultados por unidad de aprendizaje para Directores.
        out = out + "<tr>"
                    + "<th scope=\"col\"><h2>Informe de resultados por unidad de aprendizaje para Inspectores de zona escolar.</h2></th>"
                + "  </tr>";
       
        //Abrimos renglón de la tabla principal
        out = out + "<tr>";
        out = out + "<td>"; 
        
        out = out + "<table align=\"center\" width=\"65%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">";                
        out = out + "<tr>";
        out = out + "<td>Los resultados que se presentan son los promedios totales y porcentuales de cada unidad de aprendizaje desagregados por zona escolar, escuela y turno de la población estudiantil examinada. <br />El n&uacute;mero de &iacute;tems de cada unidad de aprendizaje son: <br />" + getListaUnidadAprendizaje() + "</td>";        
        out = out + "</tr>";
        out = out + "</table>";
        
        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>";
                        
        //abrimos renglón de tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; border:0;\">";                        
        
        //Imprimimos la tabla con los puntajes por unidad de aprendizaje de las escuelas de la zona escolar seleccionada
        out = out +
                "<table align=\"center\" width=\"65%\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">"                 
                + "<caption style=\"text-align:left; font-weight:bold; font-size: 9px;\">Tabla 3. Resultados por unidad de aprendizaje de la zona escolar " + this.zona_escolar + " del municipio de " + this.municipio + ".</caption>"
                + "<tr>";

        out = out + "<td style=\"text-align:center; font-weight:bold;\" rowspan=\"2\">Escuela</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\" rowspan=\"2\">Turno</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\" colspan=\"" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size() + "\">Promedio</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\" colspan=\"" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size() + "\">Porcentaje</td>";
        out = out + "</tr>";  
        
        out = out + "<tr>";   
        
        for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().get(i).getNombre() + "</td>";
        }
        
        for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().get(i).getNombre() + "</td>";
        }
                
        out = out + "</tr>";                          
        
        for(int x=0; x<this.modelosExamenes.get(this.i_modelo).getZona_escolar_por_municipio()[this.i_municipio].get(this.i_zona_escolar).getEscuelas().size(); x++) {                             
            Escuela esc = this.modelosExamenes.get(this.i_modelo).getZona_escolar_por_municipio()[this.i_municipio].get(this.i_zona_escolar).getEscuelas().get(x);                                                    
            out = out + "<tr>";  
            out = out + "<td style=\"text-align:center; font-weight:bold;\" rowspan=\"" + (esc.getTurnos().size()+1) + "\">" + esc.getId_escuela() + "</td>";
        
            for(int o=0; o<esc.getTurnos().size(); o++) {
                Turno tur = esc.getTurnos().get(o);                                                    

                if(o!=0) {
                    out = out + "<tr>";
                }
                
                out = out + "<td style=\"text-align:left;\">" + tur.getId_turno() + " </td>";
                
                for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
                    out = out + "<td style=\"text-align:center;\">" + df.format(tur.getPromedios_ua()[i]) + "</td>";
                }
                
                for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
                    out = out + "<td style=\"text-align:center;\">" + df.format(tur.getPorcentajes_aciertos_ua()[i]) + "%</td>";
                }                  
                
                out = out + "</tr>";
            }
            
            out = out + "<tr>";
            out = out + "<td style=\"text-align:center; font-weight:bold;\">Total escuela</td>";
            
            for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
                out = out + "<td style=\"text-align:center; font-weight:bold;\">" + df.format(esc.getPromedios_ua()[i]) + "</td>";
            }
            
            for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
                out = out + "<td style=\"text-align:center; font-weight:bold;\">" + df.format(esc.getPorcentajes_aciertos_ua()[i]) + "%</td>";   
            }
            
            out = out + "</tr>";            
        }                                                                        
        
        out = out + "<tr>";
        out = out + "<td colspan=\"2\" style=\"text-align:center; font-weight:bold;\">Total zona escolar:</td>";
        
        ZonaEscolar ze = this.modelosExamenes.get(this.i_modelo).getZona_escolar_por_municipio()[this.i_municipio].get(this.i_zona_escolar);                                                    
        
        for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + df.format(ze.getPromedios_ua()[i]) + "</td>";
        }
        
        for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + df.format(ze.getPorcentajes_aciertos_ua()[i]) + "%</td>";
        }
                
        out = out + "</tr>";
        
        out = out + "</table>";
        out = out + "<br /><br />";                                                                                              

        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>"; 
        
        for(int i=0; i<this.graficas_zona_ua.size(); i++) {
            //abrimos renglón de tabla principal
            out = out + "<tr>";
            out = out + "<td style=\"text-align:center; border:0;\">";

            //Imprimimos gráfica de los grupos de una escuela.
            nombreArchivo = "\"file:temp/inf_inspectores/escuelas_zona_ua" + i + ".PNG\"";
            out = out + "<img src=" + nombreArchivo + " width=\"500\" height=\"300\" border=\"0\">";
            out = out + "<br /><br />";

            //cerramos renglón de tabla principal                
            out = out + "</td>";
            out = out + "</tr>"; 
        } 
        
        //abrimos renglón de tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; border:0;\">";        
        
        //Imprimimos la tabla con los puntajes por unidad de aprendizaje de las zonas escolares del municipio seleccionado
        out = out +
                "<table align=\"center\" width=\"65%\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">"                 
                + "<caption style=\"text-align:left; font-weight:bold; font-size: 9px;\">Tabla 4. Resultados por unidad de aprendizaje del municipio de " + this.municipio + ".</caption>"
                + "<tr>";
                
        out = out + "<td style=\"text-align:center; font-weight:bold;\" rowspan=\"2\">Zona Escolar</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\" colspan=\"" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size() + "\">Puntaje promedio</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\" colspan=\"" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size() + "\">Porcentaje de aciertos</td>";
        out = out + "</tr>";  
        
        out = out + "<tr>";   
        
        for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().get(i).getNombre() + "</td>";
        }
        
        for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().get(i).getNombre() + "</td>";
        }
                
        out = out + "</tr>";     
                         
        for(int x=0; x<this.modelosExamenes.get(this.i_modelo).getZona_escolar_por_municipio()[this.i_municipio].size(); x++) {                             
            ze = this.modelosExamenes.get(this.i_modelo).getZona_escolar_por_municipio()[this.i_municipio].get(x);
            
            out = out + "<tr>"; 
            out = out + "<td style=\"text-align:left;\">" + ze.getNombre_zona_escolar() + " </td>";
            
            for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
                out = out + "<td style=\"text-align:center;\">" + df.format(ze.getPromedios_ua()[i]) + "</td>";
            }
            
            for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
                out = out + "<td style=\"text-align:center;\">" + df.format(ze.getPorcentajes_aciertos_ua()[i]) + "%</td>";   
            }
                        
            out = out + "</tr>";                        
        }                          

        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Total municipio:</td>";                
        
        for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + df.format(this.modelosExamenes.get(this.i_modelo).getPromedio_municipio_ua()[this.i_municipio][i]) + "</td>";
        }
                
        for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + df.format(this.modelosExamenes.get(this.i_modelo).getPorcentaje_aciertos_municipio_ua()[this.i_municipio][i]) + "%</td>";
        }
        
        out = out + "</tr>";
        
        out = out + "</table>";
        out = out + "<br /><br />";                                                                                              

        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>";  
        
        //abrimos renglón de tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; border:0;\">";
        
        //Imprimimos gráfica de los grupos de una escuela.
        nombreArchivo = "\"file:temp/inf_inspectores/zonas_municpio_ua.PNG\"";
        out = out + "<img src=" + nombreArchivo + " width=\"500\" height=\"300\" border=\"0\">";
        out = out + "<br /><br />";

        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>";
        
        out = out + "</table>";
              
        this.panel_resultados.setText(out); 
    }
    
    private void llenarSelects() {
        //Llenamos el combo de Modelo de Examen
        DefaultComboBoxModel model_modelo = new DefaultComboBoxModel();
        
        for(int i=0; i<this.modelosExamenes.size(); i++) {
            model_modelo.addElement(this.modelosExamenes.get(i).getNombreModelo());
        }
        
        this.combo_modelo.setModel(model_modelo);
        
        //Llenamos el combo de Municipio
        DefaultComboBoxModel model_municipio = new DefaultComboBoxModel(this.modelosExamenes.get(0).getOpciones_respuesta_municipio().toArray());                        
        this.combo_municipio.setModel(model_municipio);
        
        //Llenamos el cobo de Zona Escolar
        DefaultComboBoxModel model_zona = new DefaultComboBoxModel(); 
        
        for(int i=0; i<this.modelosExamenes.get(0).getZona_escolar_por_municipio()[0].size(); i++) {
            model_zona.addElement(this.modelosExamenes.get(0).getZona_escolar_por_municipio()[0].get(i).getNombre_zona_escolar());
        }
        
        this.combo_zona.setModel(model_zona);
        
    }

    private int getNumZonasBajoMedia() {
        int bajo_media = 0;
        
        for(ZonaEscolar ze : this.modelosExamenes.get(this.i_modelo).getZona_escolar_por_municipio()[this.i_municipio]) {
            if(ze.getPuntaje_promedio_zona_escolar()<this.promedio_municipio) {
                bajo_media++;
            }
        }
        
        return bajo_media;
    }

    private int getNumZonasSobreMedia() {
        int sobre_media = 0;
        
        for(ZonaEscolar ze : this.modelosExamenes.get(this.i_modelo).getZona_escolar_por_municipio()[this.i_municipio]) {
            if(ze.getPuntaje_promedio_zona_escolar()>this.promedio_municipio) {
                sobre_media++;
            }
        }
        
        return sobre_media;
    }

    private String getListaUnidadAprendizaje() {
        String texto = "";
        
        for(int i=0; i<this.modelosExamenes.get(i_modelo).getUnidades_aprendizaje().size(); i++) {
            texto = texto + "   " + this.modelosExamenes.get(i_modelo).getUnidades_aprendizaje().get(i).getNombre() + ": <strong>" + this.modelosExamenes.get(i_modelo).getUnidades_aprendizaje().get(i).getItems().size() + "</strong>. <br />";
        }
        
        return texto;
    }
    
    private void borrarDirectorio(File directorio) {
        File[] ficheros = directorio.listFiles();
 
        for (int x=0;x<ficheros.length;x++) {
            
            if (ficheros[x].isDirectory()) {
                borrarDirectorio(ficheros[x]);
            }
            
            ficheros[x].delete();
        }
        
        directorio.delete();
    }
    
}


