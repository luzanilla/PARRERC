/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import entidades.ModeloExamen;
import java.awt.Dimension;
import java.text.DecimalFormat;
import java.util.List;
import javax.swing.JDesktopPane;

/**
 *
 * @author Erick
 */
public class AnalisisVersionesPrueba extends javax.swing.JInternalFrame {

    private List<ModeloExamen> modelosExamenes;
    private double confiabilidad = 0;
    private double mediaDif = 0;
    private double mediaDis = 0;

    /**
     * Creates new form AnalisisVersionesPrueba
     */
    public AnalisisVersionesPrueba(List<ModeloExamen> modelosExamenes, JDesktopPane jDesktopPane1) {
        this.modelosExamenes = modelosExamenes;

        initComponents();

        calculaMediaDificultad();
        calculaMediaDiscriminacion();                        
        calculaConfiabilidad();
        
        pintar_resultados();

        Dimension desktopSize = jDesktopPane1.getSize();
        Dimension jInternalFrameSize = this.getSize();

        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2, (desktopSize.height- jInternalFrameSize.height)/2);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        panel_resultados = new javax.swing.JEditorPane();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Análisis de versiones de la prueba");
        setAutoscrolls(true);
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        panel_resultados.setEditable(false);
        panel_resultados.setContentType("text/html");
        jScrollPane1.setViewportView(panel_resultados);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JEditorPane panel_resultados;
    // End of variables declaration//GEN-END:variables

    private void calculaMediaDificultad() {

        for (int i = 0; i < this.modelosExamenes.size(); i++) {
            double sumDif = 0;

            for (int j = 0; j < this.modelosExamenes.get(i).getDificultad_reactivos().length; j++) {
                sumDif += this.modelosExamenes.get(i).getDificultad_reactivos()[j];
            }

            mediaDif = (sumDif / this.modelosExamenes.get(i).getDificultad_reactivos().length);
            this.modelosExamenes.get(i).setMediaDif(mediaDif);
        }

    }

    private void calculaMediaDiscriminacion() {

        for (int i = 0; i < this.modelosExamenes.size(); i++) {
            double sumDis = 0;

            for (int j = 0; j < this.modelosExamenes.get(i).getDiscriminacion_reactivos().length; j++) {
                sumDis += this.modelosExamenes.get(i).getDiscriminacion_reactivos()[j];
            }

            mediaDis = (sumDis / this.modelosExamenes.get(i).getDiscriminacion_reactivos().length);
            this.modelosExamenes.get(i).setMediaDis(mediaDis);
        }

    }           

    private void calculaConfiabilidad() {        
        
        for (int i = 0; i < this.modelosExamenes.size(); i++) {
            double sumVarItems = 0.0;            
            double varTotObs = 0.0;
            
            //Calculamos la sumatoria de la varianza de los ítems
            for (int j = 0; j < this.modelosExamenes.get(i).getNumero_de_items(); j++) {
                sumVarItems += getVarianza(this.modelosExamenes.get(i).getRespuestas_calificadas_item(j));                
            }
            
            //Obtenemos la varianza de los valores totales observados
            varTotObs = getVarianza(this.modelosExamenes.get(i).getTotalAciertos());
            
            confiabilidad = (this.modelosExamenes.get(i).getNumero_de_items()/(this.modelosExamenes.get(i).getNumero_de_items()-1)) * (1-(sumVarItems/varTotObs));
            this.modelosExamenes.get(i).setConfiabilidad(confiabilidad);
        }
    }

    private double getMedia(double[] data) {
        double sum = 0.0;
        double size = data.length;
        
        for (double a : data) {
            sum += a;
        }
        
        return sum / size;
    }

    private double getVarianza(double[] data) {                
        double temp = 0;
        double size = data.length;
        double mean = getMedia(data);
        
        for (double a : data) {
            temp += (mean - a) * (mean - a);
        }
        
        return temp / size;
    }

    private void pintar_resultados() {
        String out = "";
        DecimalFormat df = new DecimalFormat("0.000");
        
        for(int k=0; k<this.modelosExamenes.size(); k++) {                                                       
            out = out +
                    "<table align=\"center\" width=\"250px\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">"
                    + "<caption style=\"text-align:center; font-weight:bold;\"> " + this.modelosExamenes.get(k).getNombreModelo() + "</caption>";
                                       
            out = out + "<tr>"
                    +  "<td style=\"text-align:center; border:0;\">Confiabilidad: " + df.format(this.modelosExamenes.get(k).getConfiabilidad()) + "</td>";            

            out = out + "</tr>";                                                                       
            out = out + "<tr>"
                    +  "<td style=\"text-align:center; border:0;\">Media de la dificultad: " + df.format(this.modelosExamenes.get(k).getMediaDif()) + "</td>";            
            out = out + "</tr>";                                                                       
            out = out + "<tr>"
                    +  "<td style=\"text-align:center; border:0;\">Media de la discriminaci&oacute;n: " + df.format(this.modelosExamenes.get(k).getMediaDis()) + "</td>";            
            out = out + "</tr>";                                                                       
            out = out + "<tr>"
                    +  "<td style=\"text-align:center; border:0;\">M&iacute;nimo: " + this.modelosExamenes.get(k).getRango_minimo() + "</td>";            
            out = out + "</tr>";                                                                       
            out = out + "<tr>"
                    +  "<td style=\"text-align:center; border:0;\">M&aacute;ximo: " + this.modelosExamenes.get(k).getRango_maximo() + "</td>";            
            out = out + "</tr>";                                                                       
            out = out + "<tr>"
                    +  "<td style=\"text-align:center; border:0;\">N&uacute;mero de &iacute;tems: " + this.modelosExamenes.get(k).getNumero_de_items() + "</td>";            
            out = out + "</tr>";                                                                       
            out = out + "<tr>"
                    +  "<td style=\"text-align:center; border:0;\">N&uacute;mero de examinados: " + this.modelosExamenes.get(k).getNumero_de_examinados() + "</td>";            
            out = out + "</tr>";                                                                       
            
            out = out + "</table>";
            out = out + "<br /> <br />";
        }                

        this.panel_resultados.setText(out); 
    }
}
