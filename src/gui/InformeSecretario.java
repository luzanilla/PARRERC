/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import entidades.ModeloExamen;
import entidades.ZonaEscolar;
import java.awt.Color;
import java.awt.Dimension;
import java.io.File;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDesktopPane;
import javax.swing.JEditorPane;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author UEE
 */
public class InformeSecretario extends javax.swing.JInternalFrame {

    private JDesktopPane jDesktopPane1;
    private Color[] colores = {new Color(79, 129, 189), new Color(246, 192, 29), new Color(142, 188, 8), new Color(255, 145, 75), new Color(216, 81, 81), new Color(149, 81, 149), new Color(93, 137, 45), new Color(10, 146, 146)};
    private List<ModeloExamen> modelosExamenes;
    
    private int i_modelo;    
    private String modelo;        
    
    private double promedio_estatal;
    private double porcentaje_aciertos_estatal;
    
    private JFreeChart grafica_municipios; 
    private JFreeChart grafica_zonas;
    private JFreeChart graficas_municipios_ua;
    private List<JFreeChart> graficas_zonas_ua;
    
    private List<String> temp;
    private List<String> temp2;
    private String[] variables_seleccionadas;  
    private List<String>[] opciones_respuesta;
    private List<Integer>[] frecuencias_distractores;
    private List<Double>[] puntaje_distractores;
    private List<Double>[] promedio_distractores;
    private List<Double>[] porcentaje_distractores;    
    private List<JFreeChart> porContexto_graficas;        
    
    /**
     * Creates new form InformeInspectores
     */
    public InformeSecretario(List<ModeloExamen> modelosExamenes, JDesktopPane jDesktopPane1) {
        this.modelosExamenes = modelosExamenes;
        this.jDesktopPane1 = jDesktopPane1;
        
        initComponents();
        
        this.listaVariables.setListData(this.modelosExamenes.get(0).getVars_contexto().toArray());
        temp2 = new ArrayList<>(this.modelosExamenes.get(0).getVars_contexto().subList(0, this.modelosExamenes.get(0).getVars_contexto().size()));
        
        llenarSelects();
        
        this.jDialog1.pack();
        this.jDialog1.setLocationRelativeTo(null);
        
        Dimension desktopSize = jDesktopPane1.getSize();
        Dimension jInternalFrameSize = this.getSize();

        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2, (desktopSize.height- jInternalFrameSize.height)/2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaVariables = new javax.swing.JList();
        boton_cambiar_id_sujeto = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        lista_variable_id_sujeto = new javax.swing.JList();
        mostrar_graficas = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        boton_aceptar = new javax.swing.JButton();
        boton_cancelar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        combo_modelo = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        panel_resultados = new javax.swing.JEditorPane();

        jDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialog1.setTitle("Informe de resultados para el Secretario de Educación");
        jDialog1.setModal(true);
        jDialog1.setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        jDialog1.setResizable(false);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Elige las variables");
        jLabel1.setToolTipText("Nombre de archivo Excel");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        jLabel3.setText("Variables elegidas:");

        listaVariables.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaVariablesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listaVariables);

        boton_cambiar_id_sujeto.setText(">");
        boton_cambiar_id_sujeto.setEnabled(false);
        boton_cambiar_id_sujeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_cambiar_id_sujetoActionPerformed(evt);
            }
        });

        lista_variable_id_sujeto.setAutoscrolls(false);
        lista_variable_id_sujeto.setVisibleRowCount(1);
        lista_variable_id_sujeto.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lista_variable_id_sujetoValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(lista_variable_id_sujeto);

        mostrar_graficas.setText("Mostrar gráficos");

        jLabel2.setText("Variables de contexto:");

        boton_aceptar.setText("Aceptar");
        boton_aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_aceptarActionPerformed(evt);
            }
        });
        jPanel2.add(boton_aceptar);

        boton_cancelar.setText("Cancelar");
        boton_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_cancelarActionPerformed(evt);
            }
        });
        jPanel2.add(boton_cancelar);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel5.setText("Modelo de examen:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 35, Short.MAX_VALUE))
                    .addComponent(combo_modelo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(combo_modelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.add(jPanel6);

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(boton_cambiar_id_sujeto, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(mostrar_graficas)
                .addContainerGap())
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(boton_cambiar_id_sujeto)))
                .addGap(18, 18, 18)
                .addComponent(mostrar_graficas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1))
        );

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Informe de resultados para Secretario de Educación");

        panel_resultados.setEditable(false);
        panel_resultados.setContentType("text/html");
        jScrollPane1.setViewportView(panel_resultados);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listaVariablesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaVariablesValueChanged
        this.lista_variable_id_sujeto.clearSelection();

        if (this.listaVariables.getSelectedIndex() >= 0) {
            this.boton_cambiar_id_sujeto.setText(">");
            this.boton_cambiar_id_sujeto.setEnabled(true);
        } else {
            this.boton_cambiar_id_sujeto.setEnabled(false);
        }
    }//GEN-LAST:event_listaVariablesValueChanged

    private void boton_cambiar_id_sujetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_cambiar_id_sujetoActionPerformed
        if(temp == null) {
            temp = new ArrayList<>();
        }

        if (this.boton_cambiar_id_sujeto.getText().equalsIgnoreCase(">")) {
            //Agregamos la variable a
            temp.add(this.listaVariables.getModel().getElementAt(this.listaVariables.getSelectedIndex()).toString());
            this.lista_variable_id_sujeto.setListData(temp.toArray());

            //Cambiamos el modelo de datos
            temp2.remove(this.listaVariables.getSelectedIndex());
            this.listaVariables.setListData(temp2.toArray());
        } else {
            if (this.boton_cambiar_id_sujeto.getText().equalsIgnoreCase("<")) {
                temp2.add(this.lista_variable_id_sujeto.getModel().getElementAt(this.lista_variable_id_sujeto.getSelectedIndex()).toString());
                this.listaVariables.setListData(temp2.toArray());

                temp.remove(this.lista_variable_id_sujeto.getSelectedIndex());
                this.lista_variable_id_sujeto.setListData(temp.toArray());
            }
        }
    }//GEN-LAST:event_boton_cambiar_id_sujetoActionPerformed

    private void lista_variable_id_sujetoValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lista_variable_id_sujetoValueChanged
        //Quitamos los elementos seleccionados de los otros list
        this.listaVariables.clearSelection();

        if (this.lista_variable_id_sujeto.getSelectedIndex() >= 0) {
            //Cambiamos el sentido del botón y lo habilitamos
            this.boton_cambiar_id_sujeto.setText("<");
            this.boton_cambiar_id_sujeto.setEnabled(true);
        } else {
            this.boton_cambiar_id_sujeto.setEnabled(false);
        }
    }//GEN-LAST:event_lista_variable_id_sujetoValueChanged

    private void boton_aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_aceptarActionPerformed
        this.modelo = (String) this.combo_modelo.getSelectedItem();
        this.i_modelo = this.combo_modelo.getSelectedIndex();
        
        this.promedio_estatal = this.modelosExamenes.get(this.i_modelo).getPromedio_estatal();
        this.porcentaje_aciertos_estatal = this.modelosExamenes.get(this.i_modelo).getPorcentaje_aciertos_estatal(); 
        
        this.variables_seleccionadas = new String[this.lista_variable_id_sujeto.getModel().getSize()];

        for(int i=0; i<this.lista_variable_id_sujeto.getModel().getSize(); i++) {
            this.variables_seleccionadas[i] = this.lista_variable_id_sujeto.getModel().getElementAt(i).toString();
        }

        
        opciones_respuesta = new ArrayList[this.variables_seleccionadas.length];
        puntaje_distractores = new ArrayList[this.variables_seleccionadas.length];
        frecuencias_distractores = new ArrayList[this.variables_seleccionadas.length];
        promedio_distractores = new ArrayList[this.variables_seleccionadas.length];
        porcentaje_distractores = new ArrayList[this.variables_seleccionadas.length];

        for(int j=0; j<this.modelosExamenes.get(i_modelo).getNumero_de_examinados(); j++) {
            calcularPromedios(j, i_modelo);
        }

        this.modelosExamenes.get(i_modelo).setPorContexto_variables_seleccionadas(variables_seleccionadas);
        this.modelosExamenes.get(i_modelo).setPorContexto_opciones_respuesta(opciones_respuesta);
        this.modelosExamenes.get(i_modelo).setPorContexto_promedio_distractores(promedio_distractores);
        this.modelosExamenes.get(i_modelo).setPorContexto_porcentaje_distractores(porcentaje_distractores);

        if(this.mostrar_graficas.isSelected()) {
            crearGraficas();
        }        

        this.jDialog1.dispose();

        if(this.mostrar_graficas.isSelected()) {
            guardarImagenes();
        }

        pintarResultados();

        this.toFront();
        this.show();
    }//GEN-LAST:event_boton_aceptarActionPerformed

    private void boton_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_cancelarActionPerformed
        this.jDialog1.dispose();
    }//GEN-LAST:event_boton_cancelarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boton_aceptar;
    private javax.swing.JButton boton_cambiar_id_sujeto;
    private javax.swing.JButton boton_cancelar;
    private javax.swing.JComboBox combo_modelo;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList listaVariables;
    private javax.swing.JList lista_variable_id_sujeto;
    private javax.swing.JCheckBox mostrar_graficas;
    private javax.swing.JEditorPane panel_resultados;
    // End of variables declaration//GEN-END:variables

    private void calcularPromedios(int indice_examinado, int indice_modelo_examen) {
        int indiceVar;
        String respuesta;
        
        for(int i=0; i<this.variables_seleccionadas.length; i++) {
            if(opciones_respuesta[i]==null) {
                List<String> opciones_temp = new ArrayList();
                opciones_respuesta[i] = opciones_temp;
            }
            
            if(puntaje_distractores[i]==null) {
                List<Double> puntajes_temp = new ArrayList();
                puntaje_distractores[i] = puntajes_temp;
            }                        
            
            if(frecuencias_distractores[i]==null) {
                List<Integer> frecuencias_temp = new ArrayList();
                frecuencias_distractores[i] = frecuencias_temp;
            }
            
            if(promedio_distractores[i]==null) {
                List<Double> promedios_temp = new ArrayList();
                promedio_distractores[i] = promedios_temp;
            }
            
            if(porcentaje_distractores[i]==null) {
                List<Double> porcentajes_temp = new ArrayList();
                porcentaje_distractores[i] = porcentajes_temp;
            }
            
            indiceVar = this.modelosExamenes.get(indice_modelo_examen).getIndiceVar(this.variables_seleccionadas[i]);
            
            respuesta = this.modelosExamenes.get(indice_modelo_examen).getAlumnosOrdenada().get(indice_examinado).getRespuesta(indiceVar);
            
            if( !opciones_respuesta[i].contains(respuesta) ) {
                opciones_respuesta[i].add(respuesta);
                frecuencias_distractores[i].add(new Integer(1));
                puntaje_distractores[i].add( (double) this.modelosExamenes.get(indice_modelo_examen).getAlumnosOrdenada().get(indice_examinado).getAciertos() );
                promedio_distractores[i].add( (double) this.modelosExamenes.get(indice_modelo_examen).getAlumnosOrdenada().get(indice_examinado).getAciertos() );
                porcentaje_distractores[i].add( ((double) this.modelosExamenes.get(indice_modelo_examen).getAlumnosOrdenada().get(indice_examinado).getAciertos()/this.modelosExamenes.get(indice_modelo_examen).getNumero_de_items())*100 );
            } else {
                int indice_respuesta = opciones_respuesta[i].indexOf(respuesta);
                
                if(indice_respuesta!=-1) {
                    int cont = frecuencias_distractores[i].get(indice_respuesta).intValue();
                    cont++;
                    frecuencias_distractores[i].set(indice_respuesta, new Integer(cont));
                    
                    double p_alumno = (double) this.modelosExamenes.get(indice_modelo_examen).getAlumnosOrdenada().get(indice_examinado).getAciertos();
                    double p_total = puntaje_distractores[i].get(indice_respuesta).doubleValue();
                    p_total += p_alumno;
                    puntaje_distractores[i].set(indice_respuesta, p_total);
                    
                    promedio_distractores[i].set( indice_respuesta, puntaje_distractores[i].get(indice_respuesta)/frecuencias_distractores[i].get(indice_respuesta) );
                    porcentaje_distractores[i].set( indice_respuesta, (promedio_distractores[i].get(indice_respuesta)/this.modelosExamenes.get(indice_modelo_examen).getNumero_de_items())*100 );
                } else {
                    System.out.println("Algo raro esta pasando");
                }
            }
                        
        }
                
    }
    
    private void crearGraficas() {                       
        crearGraficaMunicipios();
        crearGraficaZonas();
        crearGraficasPorContexto();
        crearGraficaMunicipiosUA(); 
        crearGraficaZonasUA();        
    }
    
    private void crearGraficaMunicipios() {
        //Creamos las graficas por escuela y turno        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset(); 
        DecimalFormat df = new DecimalFormat("0.0");

        for(int m=0; m<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); m++) {
            String nombre_municipio = this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(m);                                

            double por = (this.modelosExamenes.get(i_modelo).getPorcentaje_aciertos_municipio().get(m)*100);
            String ni = df.format(por);
            por = new Double(ni);
            dataset.setValue(por, "Porcentaje aciertos", nombre_municipio);
        }
        
        String titulo = "Porcentaje de aciertos por Municipio";
        grafica_municipios = ChartFactory.createBarChart(titulo, "Municipios", "Porcentaje", dataset, PlotOrientation.VERTICAL, false, true, true);

        grafica_municipios.setBackgroundPaint(Color.white);

        final CategoryPlot plot = (CategoryPlot) grafica_municipios.getPlot();

        plot.setBackgroundPaint(new Color(240, 240, 240));
        plot.setRangeGridlinePaint(Color.darkGray);
        plot.setRangeGridlinesVisible(true);
        plot.setDomainGridlinePaint(Color.darkGray);            

        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setUpperBound(105);

        // customise the renderer...
        final BarRenderer renderer = (BarRenderer) plot.getRenderer();        
        //renderer.setDrawShapes(true);            
        renderer.setMaximumBarWidth(.2);   
        renderer.setItemMargin(.015);

        for(int i=0; i<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); i++) {            
            renderer.setSeriesPaint(i, colores[i]);
            renderer.setSeriesItemLabelGenerator(i, new StandardCategoryItemLabelGenerator());
            renderer.setSeriesItemLabelsVisible(i, true);                        
            renderer.setSeriesVisible(i, true);            
        }                   

        plot.setRenderer(renderer);
    }

    private void crearGraficaZonas() {
        //Creamos las graficas por grupo
        DecimalFormat df = new DecimalFormat("0.0");
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();        

        for(int m=0; m<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); m++) {
            String nombre_municipio = this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(m);
            
            for(int n=0; n<this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[m].size(); n++) {
                ZonaEscolar ze = this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[m].get(n);
                
                double por = ze.getPorcentaje_aciertos_zona_escolar();
                String ni = df.format(por);
                por = new Double(ni);
                dataset.setValue(por, ze.getNombre_zona_escolar(), nombre_municipio);            
            }
            
        }
        
        grafica_zonas = ChartFactory.createBarChart("Porcentaje de aciertos por Zona Escolar", "Municipios", "Porcentaje", dataset, PlotOrientation.VERTICAL, true, true, true);

        grafica_zonas.setBackgroundPaint(Color.white);

        final CategoryPlot plot = (CategoryPlot) grafica_zonas.getPlot();

        plot.setBackgroundPaint(new Color(240, 240, 240));
        plot.setRangeGridlinePaint(Color.darkGray);
        plot.setRangeGridlinesVisible(true);
        plot.setDomainGridlinePaint(Color.darkGray);            

        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setUpperBound(105);

        // customise the renderer...
        final BarRenderer renderer = (BarRenderer) plot.getRenderer();        
        //renderer.setDrawShapes(true);            
        renderer.setMaximumBarWidth(.2);   
        renderer.setItemMargin(.015);

        int j=0;
        
        for(int i=0; i<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); i++) {
            for(j=0; j<this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i].size(); j++) {  
                renderer.setSeriesPaint(j, colores[j]);
                renderer.setSeriesItemLabelGenerator(j, new StandardCategoryItemLabelGenerator());
                renderer.setSeriesItemLabelsVisible(j, true);                        
                renderer.setSeriesVisible(j, true);
            }
        }                   

        plot.setRenderer(renderer); 
    }
    
    private void crearGraficaMunicipiosUA() {
        DecimalFormat df = new DecimalFormat("0.0");
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();             
        
        //Graficas por turno y unidad de aprendizaje               
        for(int m=0; m<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); m++) {
            String nombre_municipio = this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(m);                                
            
            //Creamos las graficas por grupo por unidad de aprendizaje                                
            for(int i=0; i<this.modelosExamenes.get(i_modelo).getUnidades_aprendizaje().size(); i++) {
                String nombre_ua = this.modelosExamenes.get(i_modelo).getUnidades_aprendizaje().get(i).getNombre();
                
                double por = this.modelosExamenes.get(i_modelo).getPorcentaje_aciertos_municipio_ua()[m][i];
                String ni = df.format(por);
                por = new Double(ni);
                dataset.setValue(por, nombre_municipio, nombre_ua);
            }
                                               
        }
        
        graficas_municipios_ua = ChartFactory.createBarChart("Municipios por unidades de aprendizaje ", "Unidades de aprendizaje", "Porcentaje", dataset, PlotOrientation.VERTICAL, true, true, true);
        graficas_municipios_ua.setBackgroundPaint(Color.white);

        final CategoryPlot plot = (CategoryPlot) graficas_municipios_ua.getPlot();

        plot.setBackgroundPaint(new Color(240, 240, 240));
        plot.setRangeGridlinePaint(Color.darkGray);
        plot.setRangeGridlinesVisible(true);
        plot.setDomainGridlinePaint(Color.darkGray);            

        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setUpperBound(105);

        // customise the renderer...
        final BarRenderer renderer = (BarRenderer) plot.getRenderer();        
        //renderer.setDrawShapes(true);
        renderer.setSeriesPaint(0, new Color(79, 129, 189));
        renderer.setMaximumBarWidth(.2);
        renderer.setItemMargin(.015);
       
        for(int i=0; i<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); i++) {            
            renderer.setSeriesPaint(i, colores[i]);
            renderer.setSeriesItemLabelGenerator(i, new StandardCategoryItemLabelGenerator());
            renderer.setSeriesItemLabelsVisible(i, true);                        
            renderer.setSeriesVisible(i, true);                        
        }                     

        plot.setRenderer(renderer); 
    }

    private void crearGraficaZonasUA() {
        //Graficas por Zona Escolar y unidad de aprendizaje 
        DecimalFormat df = new DecimalFormat("0.0");
        graficas_zonas_ua = new ArrayList<>();
               
        for(int m=0; m<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); m++) {
            String nombre_municipio = this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(m);                                
            
            //Creamos las graficas por grupo por unidad de aprendizaje        
            DefaultCategoryDataset dataset = new DefaultCategoryDataset(); 

            for(int n=0; n<this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[m].size(); n++) {
                ZonaEscolar ze = this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[m].get(n);

                for(int i=0; i<this.modelosExamenes.get(i_modelo).getUnidades_aprendizaje().size(); i++) {
                    String nombre_ua = this.modelosExamenes.get(i_modelo).getUnidades_aprendizaje().get(i).getNombre();
                    
                    double por = ze.getPorcentajes_aciertos_ua()[i];
                    String ni = df.format(por);
                    por = new Double(ni);
                    dataset.setValue(por, ze.getNombre_zona_escolar(), nombre_ua);
                }                                                            
            }
                        
            JFreeChart grafica = ChartFactory.createBarChart("Zonas escolares del municipio de " + nombre_municipio, "Unidades de aprendizaje", "Porcentaje", dataset, PlotOrientation.VERTICAL, true, true, true);
            grafica.setBackgroundPaint(Color.white);

            final CategoryPlot plot = (CategoryPlot) grafica.getPlot();

            plot.setBackgroundPaint(new Color(240, 240, 240));
            plot.setRangeGridlinePaint(Color.darkGray);
            plot.setRangeGridlinesVisible(true);
            plot.setDomainGridlinePaint(Color.darkGray);            

            final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
            rangeAxis.setUpperBound(105);

            // customise the renderer...
            final BarRenderer renderer = (BarRenderer) plot.getRenderer();        
            //renderer.setDrawShapes(true);
            renderer.setSeriesPaint(0, new Color(79, 129, 189));
            renderer.setMaximumBarWidth(.15);
            renderer.setItemMargin(.02);

            int j=0;
            
            for(ZonaEscolar ze : this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[m]) {                
                renderer.setSeriesPaint(j, colores[j]);
                renderer.setSeriesItemLabelGenerator(j, new StandardCategoryItemLabelGenerator());
                renderer.setSeriesItemLabelsVisible(j, true);                        
                renderer.setSeriesVisible(j, true);                
                
                j++;
            }                     

            plot.setRenderer(renderer);
            
            graficas_zonas_ua.add(grafica);
        }
    }    

    private void guardarImagenes() {
        File dir = new File("temp\\inf_secretario");                
        
        if(dir.exists()) {
            borrarDirectorio(dir);                                   
        }        
        
        if (dir.mkdirs()) {  
            File dirModelo = new File("temp\\inf_secretario\\" + this.modelosExamenes.get(i_modelo).getNombreModelo());  
            
            if(dirModelo.exists()) {
                borrarDirectorio(dir);                                   
            }
            
            try {                        
                ChartUtilities.saveChartAsPNG(new java.io.File("temp\\inf_secretario\\municipios.PNG"), grafica_municipios, 500, 300);                                                
                
                ChartUtilities.saveChartAsPNG(new java.io.File("temp\\inf_secretario\\zonas_municipios.PNG"), grafica_zonas, 600, 350);  
                
                if (dirModelo.mkdirs()) {
                    for(int j=0; j<this.modelosExamenes.get(i_modelo).getPorContexto_graficas().size(); j++) {                                                 
                        
                        ChartUtilities.saveChartAsPNG(
                                new java.io.File("temp\\inf_secretario\\" + this.modelosExamenes.get(i_modelo).getNombreModelo() + "\\" + (this.modelosExamenes.get(i_modelo).getPorContexto_graficas().get(j).getTitle().getText()) + ".PNG"),
                                this.modelosExamenes.get(i_modelo).getPorContexto_graficas().get(j),
                                500,
                                300);                                                                            
                        
                    }
                }                
                
                ChartUtilities.saveChartAsPNG(new java.io.File("temp\\inf_secretario\\municipios_ua.PNG"), graficas_municipios_ua, 600, 350);                                       
                
                for(int i=0; i<this.graficas_zonas_ua.size(); i++) {
                    ChartUtilities.saveChartAsPNG(new java.io.File("temp\\inf_secretario\\zona_municipio_ua" + i + ".PNG"), graficas_zonas_ua.get(i), 600, 350);                                                
                }
                
            } catch (java.io.IOException exc) {
                JOptionPane.showMessageDialog(this, "Error al guardar las imagenes.", "Error", JOptionPane.ERROR_MESSAGE);                            
                System.out.println(exc.getLocalizedMessage());
            }     
            
            
        } else {
            JOptionPane.showMessageDialog(this, "Error al crear el directorio temporal para imagenes.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void pintarResultados() {
        int indice_tablas = 0;
        DecimalFormat df = new DecimalFormat("0.0");
        
        String out = "<table align\"center\" width=\"800px\" border=\"1\" cellspacing=\"10px\" cellpadding=\"0\">";
        out = out + "<tr>"
                    + "<th scope=\"col\" style=\"border:0;\"><img src=\"file:imagenes_apoyo/secretario.png\" border=\"0\"></th>"
                + "  </tr>";
       
        //Abrimos renglón de la tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"border:0;\">"; 
        
        out = out + "<table align=\"center\" width=\"60%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">";                
        out = out + "<tr>";
        out = out + "<td>La media de puntaje estatal fue de <strong>" + df.format(getPromedioEstatal()) + "</strong>.<br />" + getMinMaxEstatl() + "<br />Los resultados generales que se presentan son los promedios totales y porcentuales desagregados por municipio y zona escolar de la poblaci&oacute;n estudiantil examinada.</td>";        
        out = out + "</tr>";
        out = out + "</table>";
        
        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>";                                                                                                                             
        
        //abrimos renglón de tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; border:0;\">";        
        
        //Imprimimos la tabla con los puntajes de los municipios del estado
        out = out +
                "<table align=\"center\" width=\"50%\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">"                 
                + "<caption style=\"text-align:left; font-weight:bold; font-size: 9px;\">Tabla 1. Resultados generales por municipio. Puntaje y porcentaje de aciertos promedio.</caption>"
                + "<tr>";
        
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Municipio</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Promedio</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Porcentaje</td>";
        out = out + "</tr>";                            
        
        for(int j=0; j<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); j++) {                                             
            out = out + "<tr>";            
            out = out + "<td style=\"text-align:left;\">" + this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(j) + " </td>";
            out = out + "<td style=\"text-align:center;\">" + df.format(this.modelosExamenes.get(i_modelo).getPuntaje_promedio_municipio().get(j).doubleValue()) + "</td>";
            out = out + "<td style=\"text-align:center;\">" + df.format(this.modelosExamenes.get(i_modelo).getPorcentaje_aciertos_municipio().get(j).doubleValue()*100) + "%</td>";
            out = out + "</tr>";                                        
        }                                                                        

        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Total estado:</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">" + df.format(getPromedioEstatal()) + "</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">" + df.format(getPorcentajeEstatal()) + "%</td>";
        out = out + "</tr>";
        
        out = out + "</table>";
        out = out + "<br /><br />";                                                                                              

        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>";                                         
                        
        //abrimos renglón de tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; border:0;\">";
        
        //Imprimimos gráfica de los grupos de una escuela.
        String nombreArchivo = "\"file:temp/inf_secretario/municipios.PNG\"";
        out = out + "<img src=" + nombreArchivo + " width=\"500\" height=\"300\" border=\"0\">";
        out = out + "<br /><br />";

        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>";         
        
        //abrimos renglón de tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; border:0;\">";        
        
        //Imprimimos la tabla con los puntajes de las zonas escolares del municipio seleccionado
        out = out +
                "<table align=\"center\" width=\"50%\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">"                 
                + "<caption style=\"text-align:left; font-weight:bold; font-size: 9px;\">Tabla 2. Resultados generales por Zona Escolar.</caption>"
                + "<tr>";
        
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Zona Escolar</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Promedio</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Porcentaje</td>";
        out = out + "</tr>";    
                         
        out = out + "<tr>";
               
        for(int j=0; j<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); j++) {
            String nombre_municipio = this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(j);                                                            

            for(int k=0; k<this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[j].size(); k++) {

                if(k!=0) {
                    out = out + "<tr>";
                }            

                out = out + "<td style=\"text-align:left;\">Zona " + this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[j].get(k).getNombre_zona_escolar() + " " + nombre_municipio + "</td>";
                out = out + "<td style=\"text-align:center;\">" + df.format(this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[j].get(k).getPuntaje_promedio_zona_escolar()) + "</td>";
                out = out + "<td style=\"text-align:center;\">" + df.format(this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[j].get(k).getPorcentaje_aciertos_zona_escolar()) + "%</td>";
                out = out + "</tr>";                        
            }

        }                                  
        
        out = out + "</table>";
        out = out + "<br /><br />";

        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>";                    
                     
        //abrimos renglón de tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; border:0;\">";
        
        nombreArchivo = "\"file:temp/inf_secretario/zonas_municipios.PNG\"";
        out = out + "<img src=" + nombreArchivo + " width=\"600\" height=\"350\" border=\"0\">";
        out = out + "<br /><br />";
        
        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>";
        
        indice_tablas = 2;
        
        //Tablas y gráficas por variable de contexto seleccionada
        for(int i=0; i<this.modelosExamenes.get(i_modelo).getPorContexto_variables_seleccionadas().length; i++) {
            indice_tablas++;
            
            //abrimos renglón de tabla principal
            out = out + "<tr>";
            out = out + "<td style=\"text-align:center; border:0;\">";        

            //Imprimimos la tabla con los puntajes de las zonas escolares del municipio seleccionado
            out = out +
                    "<table align=\"center\" width=\"50%\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">"                 
                    + "<caption style=\"text-align:left; font-weight:bold; font-size: 9px;\">Tabla " + indice_tablas + ". Resultados generales por " + this.modelosExamenes.get(i_modelo).getPorContexto_variables_seleccionadas()[i] + ".</caption>"
                    + "<tr>";

            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + this.modelosExamenes.get(i_modelo).getPorContexto_variables_seleccionadas()[i] + "</td>";
            out = out + "<td style=\"text-align:center; font-weight:bold;\">Promedio</td>";
            out = out + "<td style=\"text-align:center; font-weight:bold;\">Porcentaje</td>";
            out = out + "</tr>";    

            out = out + "<tr>";

            for(int j=0; j<this.modelosExamenes.get(i_modelo).getPorContexto_opciones_respuesta()[i].size(); j++) {
                String nombre_opcion = this.modelosExamenes.get(i_modelo).getPorContexto_opciones_respuesta()[i].get(j);                                                                            

                if(j!=0) {
                    out = out + "<tr>";
                }            

                out = out + "<td>" + this.modelosExamenes.get(i_modelo).getPorContexto_opciones_respuesta()[i].get(j) + " </td>";
                out = out + "<td style=\"text-align:center;\">" + df.format(this.modelosExamenes.get(i_modelo).getPorContexto_promedio_distractores()[i].get(j).doubleValue()) + "</td>";
                out = out + "<td style=\"text-align:center;\">" + df.format(this.modelosExamenes.get(i_modelo).getPorContexto_porcentaje_distractores()[i].get(j).doubleValue()) + "%</td>";
                out = out + "</tr>";                        
                

            }                                  

            out = out + "</table>";
            out = out + "<br /><br />";

            //cerramos renglón de tabla principal                
            out = out + "</td>";
            out = out + "</tr>";
            
            //abrimos renglón de tabla principal
            out = out + "<tr>";
            out = out + "<td style=\"text-align:center; border:0;\">";

            
            nombreArchivo = "\"file:temp/inf_secretario/" + this.modelosExamenes.get(i_modelo).getNombreModelo() + "/" + (this.modelosExamenes.get(i_modelo).getPorContexto_graficas().get(i).getTitle().getText()) + ".PNG\"";                                    
            out = out + "<img src=" + nombreArchivo + " width=\"500\" height=\"300\" border=\"0\">";
            out = out + "<br /><br />";

            //cerramos renglón de tabla principal                
            out = out + "</td>";
            out = out + "</tr>";
        }       
                                
        //Informe de resultados por unidad de aprendizaje para Directores.
        out = out + "<tr>"
                    + "<th scope=\"col\" style=\"border:0;\"><h2>Informe de resultados por unidad de aprendizaje para Secretario de educaci&ooacute;n.</h2></th>"
                + "  </tr>";
       
        //Abrimos renglón de la tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"border:0;\">"; 
        
        out = out + "<table align=\"center\" width=\"65%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">";                
        out = out + "<tr>";
        out = out + "<td>Los resultados que se presentan son los promedios totales y porcentuales de cada unidad de aprendizaje desagregados por municipio y zona escolar de la población estudiantil examinada. <br />El n&uacute;mero de &iacute;tems de cada unidad de aprendizaje son: <br />" + getListaUnidadAprendizaje() + "</td>";        
        out = out + "</tr>";
        out = out + "</table>";
        
        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>";
                        
        //abrimos renglón de tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; border:0;\">";                        
        
        //Imprimimos la tabla con los puntajes por unidad de aprendizaje de los municipios del estado
        out = out +
                "<table align=\"center\" width=\"65%\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">"                 
                + "<caption style=\"text-align:left; font-weight:bold; font-size: 9px;\">Tabla " + indice_tablas + ". Resultados de los municipios por unidad de aprendizaje.</caption>"
                + "<tr>";
       
        out = out + "<td style=\"text-align:center; font-weight:bold;\" rowspan=\"2\">Municipio</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\" colspan=\"" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size() + "\">Promedio</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\" colspan=\"" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size() + "\">Porcentaje</td>";
        out = out + "</tr>";  
        
        out = out + "<tr>";   
        
        for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().get(i).getNombre() + "</td>";
        }
        
        for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().get(i).getNombre() + "</td>";
        }
                
        out = out + "</tr>";                          
        
        for(int x=0; x<this.modelosExamenes.get(this.i_modelo).getOpciones_respuesta_municipio().size(); x++) {                                         
            out = out + "<tr>";  
            out = out + "<td>" + this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(x) + "</td>";                                                                

            for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
                out = out + "<td style=\"text-align:center;\">" + df.format(this.modelosExamenes.get(i_modelo).getPromedio_municipio_ua()[x][i]) + "</td>";
            }

            for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
                out = out + "<td style=\"text-align:center;\">" + df.format(this.modelosExamenes.get(i_modelo).getPorcentaje_aciertos_municipio_ua()[x][i]) + "%</td>";
            }                  

            out = out + "</tr>";                                    
        }                                                                        
        
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Total estado:</td>";                
        
        for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + df.format(calculaPromedioEstatalUA(i)) + "</td>";
        }
        
        for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + df.format(calculaPorcentajeEstatalUA(i)) + "%</td>";
        }
                
        out = out + "</tr>";
        
        out = out + "</table>";
        out = out + "<br /><br />";                                                                                              

        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>"; 
        
        
        //abrimos renglón de tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; border:0;\">";

        //Imprimimos gráfica los municpios del estado por unidad académica.
        nombreArchivo = "\"file:temp/inf_secretario/municipios_ua.PNG\"";
        out = out + "<img src=" + nombreArchivo + " width=\"600\" height=\"350\" border=\"0\">";
        out = out + "<br /><br />";

        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>"; 
                         
        //abrimos renglón de tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; border:0;\">";        
                
        //Imprimimos la tabla con los puntajes por unidad de aprendizaje de las zonas escolares del municipio seleccionado
        out = out +
                "<table align=\"center\" width=\"65%\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">"                 
                + "<caption style=\"text-align:left; font-weight:bold; font-size: 9px;\">Tabla 4. Resultados por unidad de aprendizaje desagregados por Zona Escolar.</caption>"
                + "<tr>";
                
        out = out + "<td style=\"text-align:center; font-weight:bold;\" rowspan=\"2\">Zona Escolar</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\" colspan=\"" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size() + "\">Puntaje promedio</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\" colspan=\"" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size() + "\">Porcentaje de aciertos</td>";
        out = out + "</tr>";  
        
        out = out + "<tr>";   
        
        for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().get(i).getNombre() + "</td>";
        }
        
        for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().get(i).getNombre() + "</td>";
        }
                
        out = out + "</tr>";     
        
        for(int y=0; y<this.modelosExamenes.get(this.i_modelo).getOpciones_respuesta_municipio().size(); y++) {
            String nombre_municipio = this.modelosExamenes.get(this.i_modelo).getOpciones_respuesta_municipio().get(y);
            
            for(int x=0; x<this.modelosExamenes.get(this.i_modelo).getZona_escolar_por_municipio()[y].size(); x++) {                             
                ZonaEscolar ze = this.modelosExamenes.get(this.i_modelo).getZona_escolar_por_municipio()[y].get(x);

                out = out + "<tr>"; 
                out = out + "<td style=\"text-align:left;\">Zona " + ze.getNombre_zona_escolar() + ", " + nombre_municipio + "</td>";

                for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
                    out = out + "<td style=\"text-align:center;\">" + df.format(ze.getPromedios_ua()[i]) + "</td>";
                }

                for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
                    out = out + "<td style=\"text-align:center;\">" + df.format(ze.getPorcentajes_aciertos_ua()[i]) + "%</td>";   
                }

                out = out + "</tr>";                        
            }
        }                                  
               
        out = out + "</table>";
        out = out + "<br /><br />";                                                                                              

        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>";  
        
        
        for(int i=0; i<graficas_zonas_ua.size(); i++) {
            //abrimos renglón de tabla principal
            out = out + "<tr>";
            out = out + "<td style=\"text-align:center; border:0;\">";

            //Imprimimos gráfica de los grupos de una escuela.
            nombreArchivo = "\"file:temp/inf_secretario/zona_municipio_ua" + i + ".PNG\"";
            out = out + "<img src=" + nombreArchivo + " width=\"600\" height=\"350\" border=\"0\">";
            out = out + "<br /><br />";

            //cerramos renglón de tabla principal                
            out = out + "</td>";
            out = out + "</tr>";
        }        
        
        out = out + "</table>";
              
        this.panel_resultados.setText(out); 
    }
    
    private void llenarSelects() {
        //Llenamos el combo de Modelo de Examen
        DefaultComboBoxModel model_modelo = new DefaultComboBoxModel();
        
        for(int i=0; i<this.modelosExamenes.size(); i++) {
            model_modelo.addElement(this.modelosExamenes.get(i).getNombreModelo());
        }
        
        this.combo_modelo.setModel(model_modelo);                
        
    }    

    private String getListaUnidadAprendizaje() {
        String texto = "";
        
        for(int i=0; i<this.modelosExamenes.get(i_modelo).getUnidades_aprendizaje().size(); i++) {
            texto = texto + "   " + this.modelosExamenes.get(i_modelo).getUnidades_aprendizaje().get(i).getNombre() + ": <strong>" + this.modelosExamenes.get(i_modelo).getUnidades_aprendizaje().get(i).getItems().size() + "</strong>. <br />";
        }
        
        return texto;
    }
    
    private void borrarDirectorio(File directorio) {
        File[] ficheros = directorio.listFiles();
 
        for (int x=0;x<ficheros.length;x++) {
            
            if (ficheros[x].isDirectory()) {
                borrarDirectorio(ficheros[x]);
            }
            
            ficheros[x].delete();
        }
        
        directorio.delete();
    }

    private String getMinMaxEstatl() {
        String text = "";
        List<String> max = new ArrayList();
        List<String> min = new ArrayList();
        int indice_max = 0;
        int indice_min = 0;
                
        for(int i=0; i<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); i++) {
            
            if(i==0) {
                max.add(this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(i));
                indice_max = i;
                
                min.add(this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(i));
                indice_min = i;
            } else {
                //Por encima de la media estatal
                if(this.modelosExamenes.get(i_modelo).getPuntaje_promedio_municipio().get(i) > this.modelosExamenes.get(i_modelo).getPuntaje_promedio_municipio().get(indice_max)) {
                    max.clear();
                    max.add(this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(i));
                }
                
                if(this.modelosExamenes.get(i_modelo).getPuntaje_promedio_municipio().get(i) == this.modelosExamenes.get(i_modelo).getPuntaje_promedio_municipio().get(indice_max)) {                    
                    max.add(this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(i));
                }
                
                //Por debajo de la media estatal
                if(this.modelosExamenes.get(i_modelo).getPuntaje_promedio_municipio().get(i) < this.modelosExamenes.get(i_modelo).getPuntaje_promedio_municipio().get(indice_min)) {
                    max.clear();
                    max.add(this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(i));
                }
                
                if(this.modelosExamenes.get(i_modelo).getPuntaje_promedio_municipio().get(i) == this.modelosExamenes.get(i_modelo).getPuntaje_promedio_municipio().get(indice_min)) {
                    max.add(this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(i));
                }
            }
                        
        }
        
        if(max.size()==1) {
            text += "El municipio con el promedio m&aacute;s alto fue " + max.get(0) + ".";
        } else {
            text += "Los municipios con el promedio m&aacute;s alto fueron ";
            
            for(int i=0; i<max.size(); i++) {
                String mun = max.get(i);
                text += "" + mun;
                
                if((i+1)<max.size()){
                    if((i+2)<max.size()) {
                        text += ", ";
                    } else {
                        text += " y ";
                    }
                }
            }
        }
        
        if(min.size()==1) {
            text += " El municipio con el promedio m&aacute;s bajo fue " + min.get(0) + ".";
        } else {
            text += " Los municipios con el promedio m&aacute;s bajo fueron ";
            
            for(int i=0; i<min.size(); i++) {
                String mun = min.get(i);
                text += "" + mun;
                
                if((i+1)<min.size()){
                    if((i+2)<min.size()) {
                        text += ", ";
                    } else {
                        text += " y ";
                    }
                }
            }
        }
        
        return text;
    }
    
    public double calculaPromedioEstatalUA(int indice_ua) {
        double promedio = 0;
        double total_promedio = 0;
        
        for(int i=0; i<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); i++) {
            total_promedio += this.modelosExamenes.get(i_modelo).getPromedio_municipio_ua()[i][indice_ua];
        }
        
        promedio = total_promedio/this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size();
        
        return promedio;
    }
    
    public double calculaPorcentajeEstatalUA(int indice_ua) {
        double promedio = 0;
        double porcentaje = 0;        
        
        promedio = calculaPromedioEstatalUA(indice_ua);
                
        porcentaje = (promedio/this.modelosExamenes.get(i_modelo).getNumero_de_items())*100;
        
        return porcentaje;
    }
    
    public double getPromedioEstatal() {
        double promedio = 0;
        double total_promedio = 0;
        
        for(int i=0; i<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); i++) {
            total_promedio += this.modelosExamenes.get(i_modelo).getPuntaje_promedio_municipio().get(i);
        }
        
        promedio = total_promedio/this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size();
        
        return promedio;
    }
    
    public double getPorcentajeEstatal() {
        double promedio = 0;
        double porcentaje = 0;        
        
        promedio = getPromedioEstatal();
                
        porcentaje = (promedio/this.modelosExamenes.get(i_modelo).getNumero_de_items())*100;
        
        return porcentaje;
    }

    public JEditorPane getPanel_resultados() {
        return panel_resultados;
    }

    void mostrar() {
        this.jDialog1.setVisible(true);
    }

    private void crearGraficasPorContexto() {
        boolean auto = false;
        porContexto_graficas = new ArrayList<>();
        DecimalFormat df = new DecimalFormat("0.00");
        
        for(int i=0; i<this.modelosExamenes.get(i_modelo).getPorContexto_variables_seleccionadas().length; i++) {
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            
            for(int j=0; j<this.modelosExamenes.get(i_modelo).getPorContexto_opciones_respuesta()[i].size(); j++) {
                double valor = Double.valueOf(df.format(this.modelosExamenes.get(i_modelo).getPorContexto_porcentaje_distractores()[i].get(j)));
                dataset.setValue(valor, "Porcentaje", this.modelosExamenes.get(i_modelo).getPorContexto_opciones_respuesta()[i].get(j));           
            }
            
            JFreeChart chart = ChartFactory.createBarChart(this.modelosExamenes.get(i_modelo).getPorContexto_variables_seleccionadas()[i], "Opciones de respuesta", "Porcentaje", dataset, PlotOrientation.VERTICAL, false, true, true);
            
            chart.setBackgroundPaint(Color.white);

            final CategoryPlot plot = (CategoryPlot) chart.getPlot();

            plot.setBackgroundPaint(new Color(240, 240, 240));
            plot.setRangeGridlinePaint(Color.darkGray);
            plot.setRangeGridlinesVisible(true);
            plot.setDomainGridlinePaint(Color.darkGray);
            //plot.setDomainGridlinesVisible(true);
            
            final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
            rangeAxis.setUpperBound((this.modelosExamenes.get(i_modelo).getNumero_de_examinados()+10));
            
            // customise the renderer...
            final BarRenderer renderer = (BarRenderer) plot.getRenderer();        
            //renderer.setDrawShapes(true);
            renderer.setSeriesPaint(0, new Color(79, 129, 189));
            renderer.setMaximumBarWidth(.2);
            
            renderer.setSeriesItemLabelGenerator(0, new StandardCategoryItemLabelGenerator());
            renderer.setSeriesItemLabelsVisible(0, true);
                        
            renderer.setSeriesVisible(0, true);
             
            plot.setRenderer(renderer);
  
            /*ChartFrame frame1=new ChartFrame("Bar Chart", chart);
            frame1.setVisible(true);
            frame1.setSize(400,350);*/
            porContexto_graficas.add(chart);
        }
        
        this.modelosExamenes.get(i_modelo).setPorContexto_graficas(porContexto_graficas);
    }
    
    
}
