/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import entidades.ModeloExamen;
import entidades.ZonaEscolar;
import java.awt.Color;
import java.awt.Dimension;
import java.io.File;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDesktopPane;
import javax.swing.JEditorPane;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author UEE
 */
public class InformePlaneacion extends javax.swing.JInternalFrame {

    private JDesktopPane jDesktopPane1;
    private Color[] colores = {new Color(79, 129, 189), new Color(246, 192, 29), new Color(142, 188, 8), new Color(255, 145, 75), new Color(216, 81, 81), new Color(149, 81, 149), new Color(93, 137, 45), new Color(10, 146, 146)};
    private List<ModeloExamen> modelosExamenes;
    
    private int i_modelo;    
    private String modelo;        
    
    private double promedio_estatal;
    private double porcentaje_aciertos_estatal;
    
    private JFreeChart grafica_municipios; 
    private JFreeChart grafica_zonas;
    private JFreeChart graficas_municipios_ua;
    private List<JFreeChart> graficas_zonas_ua;
    
    /**
     * Creates new form InformeInspectores
     */
    public InformePlaneacion(List<ModeloExamen> modelosExamenes, JDesktopPane jDesktopPane1) {
        this.modelosExamenes = modelosExamenes;
        this.jDesktopPane1 = jDesktopPane1;
        
        initComponents();
        
        llenarSelects();
        
        this.jDialog1.pack();
        this.jDialog1.setLocationRelativeTo(null);
        
        Dimension desktopSize = jDesktopPane1.getSize();
        Dimension jInternalFrameSize = this.getSize();

        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2, (desktopSize.height- jInternalFrameSize.height)/2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        combo_modelo = new javax.swing.JComboBox();
        jPanel7 = new javax.swing.JPanel();
        botonAceptar = new javax.swing.JButton();
        botonCancelar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        panel_resultados = new javax.swing.JEditorPane();

        jDialog1.setTitle("Informe de resultados para inspectores de zona escolar");
        jDialog1.setBounds(new java.awt.Rectangle(0, 0, 0, 400));
        jDialog1.setModal(true);
        jDialog1.setPreferredSize(new java.awt.Dimension(470, 470));
        jDialog1.setResizable(false);

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(214, 217, 223));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Son diferencias instancias de las secretarías o ministerios de educación en las que se toman decisiones fuera de las escuelas pero que son determinantes en las prácticas al interior de ellas. Estos usuarios son, entre otros:\n\nInstituciones formadoras de docentes.\nUnidades a cargo de la producción de materiales educativos.\nResponsables del diseño del currículum.\n\nLa información que es necesario brindar a los actores educativos debe ir orientada a mostrar el panorama real de la educación en cuanto a los propósitos establecidos al momento de generar las políticas y los procesos a través de los cuales se llegue a ellos y de este modo se establezcan comparaciones para hacer los ajustes necesarios y alcanzar los objetivos.");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Equipos de Planeación educativa", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        jTextArea1.setFocusable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel4.setText("Modelo de examen:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 35, Short.MAX_VALUE))
                    .addComponent(combo_modelo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(combo_modelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(jPanel5);

        botonAceptar.setText("Aceptar");
        botonAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAceptarActionPerformed(evt);
            }
        });

        botonCancelar.setText("Cancelar");
        botonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addComponent(botonAceptar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(127, 127, 127))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonAceptar)
                    .addComponent(botonCancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextArea1))
                .addContainerGap())
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextArea1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Informe de resultados para Equipo de planeación didáctica");

        panel_resultados.setEditable(false);
        panel_resultados.setContentType("text/html");
        jScrollPane1.setViewportView(panel_resultados);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAceptarActionPerformed
        this.modelo = (String) this.combo_modelo.getSelectedItem();
        this.i_modelo = this.combo_modelo.getSelectedIndex();                

        this.promedio_estatal = this.modelosExamenes.get(this.i_modelo).getPromedio_estatal();
        this.porcentaje_aciertos_estatal = this.modelosExamenes.get(this.i_modelo).getPorcentaje_aciertos_estatal();        

        crearGraficas();
        guardarImagenes();

        pintarResultados();

        this.jDialog1.setVisible(false);
        
        Dimension desktopSize = jDesktopPane1.getSize();
        Dimension jInternalFrameSize = this.getSize();

        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2, (desktopSize.height- jInternalFrameSize.height)/2);
        this.toFront();
        this.show(); 
    }//GEN-LAST:event_botonAceptarActionPerformed

    private void botonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarActionPerformed
        this.jDialog1.setVisible(false);
    }//GEN-LAST:event_botonCancelarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAceptar;
    private javax.swing.JButton botonCancelar;
    private javax.swing.JComboBox combo_modelo;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JEditorPane panel_resultados;
    // End of variables declaration//GEN-END:variables

    private void crearGraficas() {                       
        crearGraficaMunicipios();
        crearGraficaZonas();
        crearGraficaMunicipiosUA(); 
        crearGraficaZonasUA();
    }
    
    private void crearGraficaMunicipios() {
        //Creamos las graficas por escuela y turno        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset(); 
        DecimalFormat df = new DecimalFormat("0.0");

        for(int m=0; m<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); m++) {
            String nombre_municipio = this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(m);                                

            double por = (this.modelosExamenes.get(i_modelo).getPorcentaje_aciertos_municipio().get(m)*100);
            String ni = df.format(por);
            por = new Double(ni);
            dataset.setValue(por, "Porcentaje aciertos", nombre_municipio);
        }
        
        String titulo = "Porcentaje de aciertos por Municipio";
        grafica_municipios = ChartFactory.createBarChart(titulo, "Municipios", "Porcentaje", dataset, PlotOrientation.VERTICAL, false, true, true);

        grafica_municipios.setBackgroundPaint(Color.white);

        final CategoryPlot plot = (CategoryPlot) grafica_municipios.getPlot();

        plot.setBackgroundPaint(new Color(240, 240, 240));
        plot.setRangeGridlinePaint(Color.darkGray);
        plot.setRangeGridlinesVisible(true);
        plot.setDomainGridlinePaint(Color.darkGray);            

        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setUpperBound(105);

        // customise the renderer...
        final BarRenderer renderer = (BarRenderer) plot.getRenderer();        
        //renderer.setDrawShapes(true);            
        renderer.setMaximumBarWidth(.2);   
        renderer.setItemMargin(.015);

        for(int i=0; i<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); i++) {            
            renderer.setSeriesPaint(i, colores[i]);
            renderer.setSeriesItemLabelGenerator(i, new StandardCategoryItemLabelGenerator());
            renderer.setSeriesItemLabelsVisible(i, true);                        
            renderer.setSeriesVisible(i, true);            
        }                   

        plot.setRenderer(renderer);
    }

    private void crearGraficaZonas() {
        //Creamos las graficas por grupo
        DecimalFormat df = new DecimalFormat("0.0");
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();        

        for(int m=0; m<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); m++) {
            String nombre_municipio = this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(m);
            
            for(int n=0; n<this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[m].size(); n++) {
                ZonaEscolar ze = this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[m].get(n);
                
                double por = ze.getPorcentaje_aciertos_zona_escolar();
                String ni = df.format(por);
                por = new Double(ni);
                dataset.setValue(por, ze.getNombre_zona_escolar(), nombre_municipio);            
            }
            
        }
        
        grafica_zonas = ChartFactory.createBarChart("Porcentaje de aciertos por Zona Escolar", "Municipios", "Porcentaje", dataset, PlotOrientation.VERTICAL, true, true, true);

        grafica_zonas.setBackgroundPaint(Color.white);

        final CategoryPlot plot = (CategoryPlot) grafica_zonas.getPlot();

        plot.setBackgroundPaint(new Color(240, 240, 240));
        plot.setRangeGridlinePaint(Color.darkGray);
        plot.setRangeGridlinesVisible(true);
        plot.setDomainGridlinePaint(Color.darkGray);            

        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setUpperBound(105);

        // customise the renderer...
        final BarRenderer renderer = (BarRenderer) plot.getRenderer();        
        //renderer.setDrawShapes(true);            
        renderer.setMaximumBarWidth(.2);   
        renderer.setItemMargin(.015);

        int j=0;
        
        for(int i=0; i<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); i++) {
            for(j=0; j<this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[i].size(); j++) {  
                renderer.setSeriesPaint(j, colores[j]);
                renderer.setSeriesItemLabelGenerator(j, new StandardCategoryItemLabelGenerator());
                renderer.setSeriesItemLabelsVisible(j, true);                        
                renderer.setSeriesVisible(j, true);
            }
        }                   

        plot.setRenderer(renderer); 
    }
    
    private void crearGraficaMunicipiosUA() {
        DecimalFormat df = new DecimalFormat("0.0");
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();             
        
        //Graficas por turno y unidad de aprendizaje               
        for(int m=0; m<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); m++) {
            String nombre_municipio = this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(m);                                
            
            //Creamos las graficas por grupo por unidad de aprendizaje                                
            for(int i=0; i<this.modelosExamenes.get(i_modelo).getUnidades_aprendizaje().size(); i++) {
                String nombre_ua = this.modelosExamenes.get(i_modelo).getUnidades_aprendizaje().get(i).getNombre();
                
                double por = this.modelosExamenes.get(i_modelo).getPorcentaje_aciertos_municipio_ua()[m][i];
                String ni = df.format(por);
                por = new Double(ni);
                dataset.setValue(por, nombre_municipio, nombre_ua);
            }
                                               
        }
        
        graficas_municipios_ua = ChartFactory.createBarChart("Municipios por unidades de aprendizaje ", "Unidades de aprendizaje", "Porcentaje", dataset, PlotOrientation.VERTICAL, true, true, true);
        graficas_municipios_ua.setBackgroundPaint(Color.white);

        final CategoryPlot plot = (CategoryPlot) graficas_municipios_ua.getPlot();

        plot.setBackgroundPaint(new Color(240, 240, 240));
        plot.setRangeGridlinePaint(Color.darkGray);
        plot.setRangeGridlinesVisible(true);
        plot.setDomainGridlinePaint(Color.darkGray);            

        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setUpperBound(105);

        // customise the renderer...
        final BarRenderer renderer = (BarRenderer) plot.getRenderer();        
        //renderer.setDrawShapes(true);
        renderer.setSeriesPaint(0, new Color(79, 129, 189));
        renderer.setMaximumBarWidth(.2);
        renderer.setItemMargin(.015);
       
        for(int i=0; i<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); i++) {            
            renderer.setSeriesPaint(i, colores[i]);
            renderer.setSeriesItemLabelGenerator(i, new StandardCategoryItemLabelGenerator());
            renderer.setSeriesItemLabelsVisible(i, true);                        
            renderer.setSeriesVisible(i, true);                        
        }                     

        plot.setRenderer(renderer); 
    }

    private void crearGraficaZonasUA() {
        //Graficas por Zona Escolar y unidad de aprendizaje 
        DecimalFormat df = new DecimalFormat("0.0");
        graficas_zonas_ua = new ArrayList<>();
               
        for(int m=0; m<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); m++) {
            String nombre_municipio = this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(m);                                
            
            //Creamos las graficas por grupo por unidad de aprendizaje        
            DefaultCategoryDataset dataset = new DefaultCategoryDataset(); 

            for(int n=0; n<this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[m].size(); n++) {
                ZonaEscolar ze = this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[m].get(n);

                for(int i=0; i<this.modelosExamenes.get(i_modelo).getUnidades_aprendizaje().size(); i++) {
                    String nombre_ua = this.modelosExamenes.get(i_modelo).getUnidades_aprendizaje().get(i).getNombre();
                    
                    double por = ze.getPorcentajes_aciertos_ua()[i];
                    String ni = df.format(por);
                    por = new Double(ni);
                    dataset.setValue(por, ze.getNombre_zona_escolar(), nombre_ua);
                }                                                            
            }
                        
            JFreeChart grafica = ChartFactory.createBarChart("Zonas escolares del municipio de " + nombre_municipio, "Unidades de aprendizaje", "Porcentaje", dataset, PlotOrientation.VERTICAL, true, true, true);
            grafica.setBackgroundPaint(Color.white);

            final CategoryPlot plot = (CategoryPlot) grafica.getPlot();

            plot.setBackgroundPaint(new Color(240, 240, 240));
            plot.setRangeGridlinePaint(Color.darkGray);
            plot.setRangeGridlinesVisible(true);
            plot.setDomainGridlinePaint(Color.darkGray);            

            final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
            rangeAxis.setUpperBound(105);

            // customise the renderer...
            final BarRenderer renderer = (BarRenderer) plot.getRenderer();        
            //renderer.setDrawShapes(true);
            renderer.setSeriesPaint(0, new Color(79, 129, 189));
            renderer.setMaximumBarWidth(.15);
            renderer.setItemMargin(.02);

            int j=0;
            
            for(ZonaEscolar ze : this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[m]) {                
                renderer.setSeriesPaint(j, colores[j]);
                renderer.setSeriesItemLabelGenerator(j, new StandardCategoryItemLabelGenerator());
                renderer.setSeriesItemLabelsVisible(j, true);                        
                renderer.setSeriesVisible(j, true);                
                
                j++;
            }                     

            plot.setRenderer(renderer);
            
            graficas_zonas_ua.add(grafica);
        }
    }    

    private void guardarImagenes() {
        File dir = new File("temp\\inf_planeacion");                
        
        if(dir.exists()) {
            borrarDirectorio(dir);                                   
        }        
        
        if (dir.mkdirs()) {                                                                                               
            
            try {                        
                ChartUtilities.saveChartAsPNG(new java.io.File("temp\\inf_planeacion\\municipios.PNG"), grafica_municipios, 500, 300);                                                
                
                ChartUtilities.saveChartAsPNG(new java.io.File("temp\\inf_planeacion\\zonas_municipios.PNG"), grafica_zonas, 600, 350);                                                                                
                
                ChartUtilities.saveChartAsPNG(new java.io.File("temp\\inf_planeacion\\municipios_ua.PNG"), graficas_municipios_ua, 600, 350);                                       
                
                for(int i=0; i<this.graficas_zonas_ua.size(); i++) {
                    ChartUtilities.saveChartAsPNG(new java.io.File("temp\\inf_planeacion\\zona_municipio_ua" + i + ".PNG"), graficas_zonas_ua.get(i), 600, 350);                                                
                }
                
            } catch (java.io.IOException exc) {
                JOptionPane.showMessageDialog(this, "Error al guardar las imagenes.", "Error", JOptionPane.ERROR_MESSAGE);                            

            }     
            
            
        } else {
            JOptionPane.showMessageDialog(this, "Error al crear el directorio temporal para imagenes.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void pintarResultados() {
        DecimalFormat df = new DecimalFormat("0.0");
        
        String out = "<table align\"center\" width=\"800px\" border=\"1\" cellspacing=\"10px\" cellpadding=\"0\">";
        out = out + "<tr>"
                    + "<th scope=\"col\" style=\"border:0;\"><img src=\"file:imagenes_apoyo/planeacion.png\" border=\"0\"></th>"
                + "  </tr>";
       
        //Abrimos renglón de la tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"border:0;\">"; 
        
        out = out + "<table align=\"center\" width=\"60%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">";                
        out = out + "<tr>";
        out = out + "<td>La media de puntaje estatal fue de <strong>" + df.format(getPromedioEstatal()) + "</strong>.<br />" + getMinMaxEstatl() + "<br />Los resultados generales que se presentan son los promedios totales y porcentuales desagregados por municipio y zona escolar de la poblaci&oacute;n estudiantil examinada.</td>";        
        out = out + "</tr>";
        out = out + "</table>";
        
        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>";                                                                                                                             
        
        //abrimos renglón de tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; border:0;\">";        
        
        //Imprimimos la tabla con los puntajes de los municipios del estado
        out = out +
                "<table align=\"center\" width=\"50%\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">"                 
                + "<caption style=\"text-align:left; font-weight:bold; font-size: 9px;\">Tabla 1. Resultados generales por municipio. Puntaje y porcentaje de aciertos promedio.</caption>"
                + "<tr>";
        
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Municipio</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Promedio</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Porcentaje</td>";
        out = out + "</tr>";                            
        
        for(int j=0; j<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); j++) {                                             
            out = out + "<tr>";            
            out = out + "<td style=\"text-align:left;\">" + this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(j) + " </td>";
            out = out + "<td style=\"text-align:center;\">" + df.format(this.modelosExamenes.get(i_modelo).getPuntaje_promedio_municipio().get(j).doubleValue()) + "</td>";
            out = out + "<td style=\"text-align:center;\">" + df.format(this.modelosExamenes.get(i_modelo).getPorcentaje_aciertos_municipio().get(j).doubleValue()*100) + "%</td>";
            out = out + "</tr>";                                        
        }                                                                        

        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Total estado:</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">" + df.format(getPromedioEstatal()) + "</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">" + df.format(getPorcentajeEstatal()) + "%</td>";
        out = out + "</tr>";
        
        out = out + "</table>";
        out = out + "<br /><br />";                                                                                              

        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>";                                         
                        
        //abrimos renglón de tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; border:0;\">";
        
        //Imprimimos gráfica de los grupos de una escuela.
        String nombreArchivo = "\"file:temp/inf_planeacion/municipios.PNG\"";
        out = out + "<img src=" + nombreArchivo + " width=\"500\" height=\"300\" border=\"0\">";
        out = out + "<br /><br />";

        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>";         
        
        //abrimos renglón de tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; border:0;\">";        
        
        //Imprimimos la tabla con los puntajes de las zonas escolares del municipio seleccionado
        out = out +
                "<table align=\"center\" width=\"50%\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">"                 
                + "<caption style=\"text-align:left; font-weight:bold; font-size: 9px;\">Tabla 2. Resultados generales por Zona Escolar.</caption>"
                + "<tr>";
        
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Zona Escolar</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Promedio</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Porcentaje</td>";
        out = out + "</tr>";    
                         
        out = out + "<tr>";
               
        for(int j=0; j<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); j++) {
            String nombre_municipio = this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(j);                                                            

            for(int k=0; k<this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[j].size(); k++) {

                if(k!=0) {
                    out = out + "<tr>";
                }            

                out = out + "<td style=\"text-align:left;\">Zona " + this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[j].get(k).getNombre_zona_escolar() + " " + nombre_municipio + "</td>";
                out = out + "<td style=\"text-align:center;\">" + df.format(this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[j].get(k).getPuntaje_promedio_zona_escolar()) + "</td>";
                out = out + "<td style=\"text-align:center;\">" + df.format(this.modelosExamenes.get(i_modelo).getZona_escolar_por_municipio()[j].get(k).getPorcentaje_aciertos_zona_escolar()) + "%</td>";
                out = out + "</tr>";                        
            }

        }                                  
        
        out = out + "</table>";
        out = out + "<br /><br />";

        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>";                    
               
        //abrimos renglón de tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; border:0;\">";
        
        nombreArchivo = "\"file:temp/inf_planeacion/zonas_municipios.PNG\"";
        out = out + "<img src=" + nombreArchivo + " width=\"600\" height=\"350\" border=\"0\">";
        out = out + "<br /><br />";
        
        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>";
                                
        //Informe de resultados por unidad de aprendizaje para Directores.
        out = out + "<tr>"
                    + "<th scope=\"col\" style=\"border:0;\"><h2>Informe de resultados por unidad de aprendizaje para el Equipo de planeaci&oacute;n did&aacute;ctica.</h2></th>"
                + "  </tr>";
       
        //Abrimos renglón de la tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"border:0;\">"; 
        
        out = out + "<table align=\"center\" width=\"65%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">";                
        out = out + "<tr>";
        out = out + "<td>Los resultados que se presentan son los promedios totales y porcentuales de cada unidad de aprendizaje desagregados por municipio y zona escolar de la población estudiantil examinada. <br />El n&uacute;mero de &iacute;tems de cada unidad de aprendizaje son: <br />" + getListaUnidadAprendizaje() + "</td>";        
        out = out + "</tr>";
        out = out + "</table>";
        
        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>";
                        
        //abrimos renglón de tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; border:0;\">";                        
        
        //Imprimimos la tabla con los puntajes por unidad de aprendizaje de los municipios del estado
        out = out +
                "<table align=\"center\" width=\"65%\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">"                 
                + "<caption style=\"text-align:left; font-weight:bold; font-size: 9px;\">Tabla 3. Resultados de los municipios por unidad de aprendizaje.</caption>"
                + "<tr>";
       
        out = out + "<td style=\"text-align:center; font-weight:bold;\" rowspan=\"2\">Municipio</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\" colspan=\"" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size() + "\">Promedio</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\" colspan=\"" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size() + "\">Porcentaje</td>";
        out = out + "</tr>";  
        
        out = out + "<tr>";   
        
        for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().get(i).getNombre() + "</td>";
        }
        
        for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().get(i).getNombre() + "</td>";
        }
                
        out = out + "</tr>";                          
        
        for(int x=0; x<this.modelosExamenes.get(this.i_modelo).getOpciones_respuesta_municipio().size(); x++) {                                         
            out = out + "<tr>";  
            out = out + "<td style=\"text-align:center; font-weight:bold;\" >" + this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(x) + "</td>";                                                                

            for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
                out = out + "<td style=\"text-align:center;\">" + df.format(this.modelosExamenes.get(i_modelo).getPromedio_municipio_ua()[x][i]) + "</td>";
            }

            for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
                out = out + "<td style=\"text-align:center;\">" + df.format(this.modelosExamenes.get(i_modelo).getPorcentaje_aciertos_municipio_ua()[x][i]) + "%</td>";
            }                  

            out = out + "</tr>";                                    
        }                                                                        
        
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\">Total estado:</td>";                
        
        for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + df.format(calculaPromedioEstatalUA(i)) + "</td>";
        }
        
        for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + df.format(calculaPorcentajeEstatalUA(i)) + "%</td>";
        }
                
        out = out + "</tr>";
        
        out = out + "</table>";
        out = out + "<br /><br />";                                                                                              

        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>"; 
        
        
        //abrimos renglón de tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; border:0;\">";

        //Imprimimos gráfica los municpios del estado por unidad académica.
        nombreArchivo = "\"file:temp/inf_planeacion/municipios_ua.PNG\"";
        out = out + "<img src=" + nombreArchivo + " width=\"600\" height=\"350\" border=\"0\">";
        out = out + "<br /><br />";

        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>"; 
                         
        //abrimos renglón de tabla principal
        out = out + "<tr>";
        out = out + "<td style=\"text-align:center; border:0;\">";        
                
        //Imprimimos la tabla con los puntajes por unidad de aprendizaje de las zonas escolares del municipio seleccionado
        out = out +
                "<table align=\"center\" width=\"65%\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">"                 
                + "<caption style=\"text-align:left; font-weight:bold; font-size: 9px;\">Tabla 4. Resultados por unidad de aprendizaje desagregados por Zona Escolar.</caption>"
                + "<tr>";
                
        out = out + "<td style=\"text-align:center; font-weight:bold;\" rowspan=\"2\">Zona Escolar</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\" colspan=\"" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size() + "\">Puntaje promedio</td>";
        out = out + "<td style=\"text-align:center; font-weight:bold;\" colspan=\"" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size() + "\">Porcentaje de aciertos</td>";
        out = out + "</tr>";  
        
        out = out + "<tr>";   
        
        for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().get(i).getNombre() + "</td>";
        }
        
        for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
            out = out + "<td style=\"text-align:center; font-weight:bold;\">" + this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().get(i).getNombre() + "</td>";
        }
                
        out = out + "</tr>";     
        
        for(int y=0; y<this.modelosExamenes.get(this.i_modelo).getOpciones_respuesta_municipio().size(); y++) {
            String nombre_municipio = this.modelosExamenes.get(this.i_modelo).getOpciones_respuesta_municipio().get(y);
            
            for(int x=0; x<this.modelosExamenes.get(this.i_modelo).getZona_escolar_por_municipio()[y].size(); x++) {                             
                ZonaEscolar ze = this.modelosExamenes.get(this.i_modelo).getZona_escolar_por_municipio()[y].get(x);

                out = out + "<tr>"; 
                out = out + "<td style=\"text-align:left;\">" + ze.getNombre_zona_escolar() + " " + nombre_municipio + "</td>";

                for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
                    out = out + "<td style=\"text-align:center;\">" + df.format(ze.getPromedios_ua()[i]) + "</td>";
                }

                for(int i=0; i<this.modelosExamenes.get(this.i_modelo).getUnidades_aprendizaje().size(); i++) {
                    out = out + "<td style=\"text-align:center;\">" + df.format(ze.getPorcentajes_aciertos_ua()[i]) + "%</td>";   
                }

                out = out + "</tr>";                        
            }
        }                                  
               
        out = out + "</table>";
        out = out + "<br /><br />";                                                                                              

        //cerramos renglón de tabla principal                
        out = out + "</td>";
        out = out + "</tr>";  
        
        
        for(int i=0; i<graficas_zonas_ua.size(); i++) {
            //abrimos renglón de tabla principal
            out = out + "<tr>";
            out = out + "<td style=\"text-align:center; border:0;\">";

            //Imprimimos gráfica de los grupos de una escuela.
            nombreArchivo = "\"file:temp/inf_planeacion/zona_municipio_ua" + i + ".PNG\"";
            out = out + "<img src=" + nombreArchivo + " width=\"600\" height=\"350\" border=\"0\">";
            out = out + "<br /><br />";

            //cerramos renglón de tabla principal                
            out = out + "</td>";
            out = out + "</tr>";
        }        
        
        out = out + "</table>";
              
        this.panel_resultados.setText(out); 
    }
    
    private void llenarSelects() {
        //Llenamos el combo de Modelo de Examen
        DefaultComboBoxModel model_modelo = new DefaultComboBoxModel();
        
        for(int i=0; i<this.modelosExamenes.size(); i++) {
            model_modelo.addElement(this.modelosExamenes.get(i).getNombreModelo());
        }
        
        this.combo_modelo.setModel(model_modelo);                
        
    }    

    private String getListaUnidadAprendizaje() {
        String texto = "";
        
        for(int i=0; i<this.modelosExamenes.get(i_modelo).getUnidades_aprendizaje().size(); i++) {
            texto = texto + "   " + this.modelosExamenes.get(i_modelo).getUnidades_aprendizaje().get(i).getNombre() + ": <strong>" + this.modelosExamenes.get(i_modelo).getUnidades_aprendizaje().get(i).getItems().size() + "</strong>. <br />";
        }
        
        return texto;
    }
    
    private void borrarDirectorio(File directorio) {
        File[] ficheros = directorio.listFiles();
 
        for (int x=0;x<ficheros.length;x++) {
            
            if (ficheros[x].isDirectory()) {
                borrarDirectorio(ficheros[x]);
            }
            
            ficheros[x].delete();
        }
        
        directorio.delete();
    }

    private String getMinMaxEstatl() {
        String text = "";
        List<String> max = new ArrayList();
        List<String> min = new ArrayList();
        int indice_max = 0;
        int indice_min = 0;
                
        for(int i=0; i<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); i++) {
            
            if(i==0) {
                max.add(this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(i));
                indice_max = i;
                
                min.add(this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(i));
                indice_min = i;
            } else {
                //Por encima de la media estatal
                if(this.modelosExamenes.get(i_modelo).getPuntaje_promedio_municipio().get(i) > this.modelosExamenes.get(i_modelo).getPuntaje_promedio_municipio().get(indice_max)) {
                    max.clear();
                    max.add(this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(i));
                }
                
                if(this.modelosExamenes.get(i_modelo).getPuntaje_promedio_municipio().get(i) == this.modelosExamenes.get(i_modelo).getPuntaje_promedio_municipio().get(indice_max)) {                    
                    max.add(this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(i));
                }
                
                //Por debajo de la media estatal
                if(this.modelosExamenes.get(i_modelo).getPuntaje_promedio_municipio().get(i) < this.modelosExamenes.get(i_modelo).getPuntaje_promedio_municipio().get(indice_min)) {
                    max.clear();
                    max.add(this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(i));
                }
                
                if(this.modelosExamenes.get(i_modelo).getPuntaje_promedio_municipio().get(i) == this.modelosExamenes.get(i_modelo).getPuntaje_promedio_municipio().get(indice_min)) {
                    max.add(this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().get(i));
                }
            }
                        
        }
        
        if(max.size()==1) {
            text += "El municipio con el promedio m&aacute;s alto fue " + max.get(0) + ".";
        } else {
            text += "Los municipios con el promedio m&aacute;s alto fueron ";
            
            for(int i=0; i<max.size(); i++) {
                String mun = max.get(i);
                text += "" + mun;
                
                if((i+1)<max.size()){
                    if((i+2)<max.size()) {
                        text += ", ";
                    } else {
                        text += " y ";
                    }
                }
            }
        }
        
        if(min.size()==1) {
            text += " El municipio con el promedio m&aacute;s bajo fue " + min.get(0) + ".";
        } else {
            text += " Los municipios con el promedio m&aacute;s bajo fueron ";
            
            for(int i=0; i<min.size(); i++) {
                String mun = min.get(i);
                text += "" + mun;
                
                if((i+1)<min.size()){
                    if((i+2)<min.size()) {
                        text += ", ";
                    } else {
                        text += " y ";
                    }
                }
            }
        }
        
        return text;
    }
    
    public double calculaPromedioEstatalUA(int indice_ua) {
        double promedio = 0;
        double total_promedio = 0;
        
        for(int i=0; i<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); i++) {
            total_promedio += this.modelosExamenes.get(i_modelo).getPromedio_municipio_ua()[i][indice_ua];
        }
        
        promedio = total_promedio/this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size();
        
        return promedio;
    }
    
    public double calculaPorcentajeEstatalUA(int indice_ua) {
        double promedio = 0;
        double porcentaje = 0;        
        
        promedio = calculaPromedioEstatalUA(indice_ua);
                
        porcentaje = (promedio/this.modelosExamenes.get(i_modelo).getNumero_de_items())*100;
        
        return porcentaje;
    }
    
    public double getPromedioEstatal() {
        double promedio = 0;
        double total_promedio = 0;
        
        for(int i=0; i<this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size(); i++) {
            total_promedio += this.modelosExamenes.get(i_modelo).getPuntaje_promedio_municipio().get(i);
        }
        
        promedio = total_promedio/this.modelosExamenes.get(i_modelo).getOpciones_respuesta_municipio().size();
        
        return promedio;
    }
    
    public double getPorcentajeEstatal() {
        double promedio = 0;
        double porcentaje = 0;        
        
        promedio = getPromedioEstatal();
                
        porcentaje = (promedio/this.modelosExamenes.get(i_modelo).getNumero_de_items())*100;
        
        return porcentaje;
    }

    public JEditorPane getPanel_resultados() {
        return panel_resultados;
    }

    void mostrar() {
        this.jDialog1.setVisible(true);
    }
    
    
}
