/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import entidades.ModeloExamen;
import java.awt.Color;
import java.awt.Dimension;
import java.io.File;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JDesktopPane;
import javax.swing.JEditorPane;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author UEE
 */
public class ResultadosUnidadPorContexto extends javax.swing.JInternalFrame {

    private List<ModeloExamen> modelosExamenes;
    private DefineVariablesAnalisis dv;
    private List<String> temp;
    private List<String> temp2;
    private String[] variables_seleccionadas;  
    private List<String>[][] opciones_respuesta;
    
    private List<Integer>[][] frecuencias_distractores_ua;
    private List<Double>[][] puntaje_distractores_ua;
    private List<Double>[][] promedio_distractores_ua;
    private List<Double>[][] porcentaje_distractores_ua;
    
    private List<JFreeChart> unidadesPorContexto_graficas;
    private Color[] colores = {new Color(79, 129, 189), new Color(246, 192, 29), new Color(142, 188, 8), new Color(255, 145, 75), new Color(216, 81, 81), new Color(149, 81, 149), new Color(93, 137, 45), new Color(10, 146, 146)};
    
    /**
     * Creates new form ResultadosUnidadPorContexto
     */
    public ResultadosUnidadPorContexto(List<ModeloExamen> modelosExamenes, JDesktopPane jDesktopPane1) {
        this.modelosExamenes = modelosExamenes;        
        initComponents();       
        
        this.listaVariables.setListData(this.modelosExamenes.get(0).getVars_contexto().toArray());
        temp2 = new ArrayList<>(this.modelosExamenes.get(0).getVars_contexto().subList(0, this.modelosExamenes.get(0).getVars_contexto().size()));
                    
        this.jDialog1.pack();
        this.jDialog1.setLocationRelativeTo(null);       
        
        Dimension desktopSize = jDesktopPane1.getSize();
        Dimension jInternalFrameSize = this.getSize();

        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2, (desktopSize.height- jInternalFrameSize.height)/2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaVariables = new javax.swing.JList();
        boton_cambiar_id_sujeto = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        lista_variable_id_sujeto = new javax.swing.JList();
        mostrar_graficas = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        boton_aceptar = new javax.swing.JButton();
        boton_cancelar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        panel_resultados = new javax.swing.JEditorPane();

        jDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialog1.setTitle("Cargar datos desde Excel");
        jDialog1.setModal(true);
        jDialog1.setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        jDialog1.setResizable(false);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Elige las variables");
        jLabel1.setToolTipText("Nombre de archivo Excel");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        jLabel3.setText("Variables elegidas:");

        listaVariables.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaVariablesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listaVariables);

        boton_cambiar_id_sujeto.setText(">");
        boton_cambiar_id_sujeto.setEnabled(false);
        boton_cambiar_id_sujeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_cambiar_id_sujetoActionPerformed(evt);
            }
        });

        lista_variable_id_sujeto.setAutoscrolls(false);
        lista_variable_id_sujeto.setVisibleRowCount(1);
        lista_variable_id_sujeto.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lista_variable_id_sujetoValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(lista_variable_id_sujeto);

        mostrar_graficas.setText("Mostrar gr√°ficos");

        jLabel2.setText("Variables de contexto:");

        boton_aceptar.setText("Aceptar");
        boton_aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_aceptarActionPerformed(evt);
            }
        });
        jPanel1.add(boton_aceptar);

        boton_cancelar.setText("Cancelar");
        boton_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_cancelarActionPerformed(evt);
            }
        });
        jPanel1.add(boton_cancelar);

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(boton_cambiar_id_sujeto, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(mostrar_graficas)
                .addContainerGap())
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(boton_cambiar_id_sujeto)))
                .addGap(18, 18, 18)
                .addComponent(mostrar_graficas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Resultados por unidad de aprendizaje contra variables de contexto");

        panel_resultados.setEditable(false);
        panel_resultados.setContentType("text/html");
        jScrollPane1.setViewportView(panel_resultados);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listaVariablesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaVariablesValueChanged
        this.lista_variable_id_sujeto.clearSelection();

        if (this.listaVariables.getSelectedIndex() >= 0) {
            this.boton_cambiar_id_sujeto.setText(">");
            this.boton_cambiar_id_sujeto.setEnabled(true);
        } else {
            this.boton_cambiar_id_sujeto.setEnabled(false);
        }
    }//GEN-LAST:event_listaVariablesValueChanged

    private void boton_cambiar_id_sujetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_cambiar_id_sujetoActionPerformed
        if(temp == null) {
            temp = new ArrayList<>();
        }

        if (this.boton_cambiar_id_sujeto.getText().equalsIgnoreCase(">")) {
            //Agregamos la variable a
            temp.add(this.listaVariables.getModel().getElementAt(this.listaVariables.getSelectedIndex()).toString());
            this.lista_variable_id_sujeto.setListData(temp.toArray());

            //Cambiamos el modelo de datos
            temp2.remove(this.listaVariables.getSelectedIndex());
            this.listaVariables.setListData(temp2.toArray());
        } else {
            if (this.boton_cambiar_id_sujeto.getText().equalsIgnoreCase("<")) {
                temp2.add(this.lista_variable_id_sujeto.getModel().getElementAt(this.lista_variable_id_sujeto.getSelectedIndex()).toString());
                this.listaVariables.setListData(temp2.toArray());

                temp.remove(this.lista_variable_id_sujeto.getSelectedIndex());
                this.lista_variable_id_sujeto.setListData(temp.toArray());
            }
        }
    }//GEN-LAST:event_boton_cambiar_id_sujetoActionPerformed

    private void lista_variable_id_sujetoValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lista_variable_id_sujetoValueChanged
        //Quitamos los elementos seleccionados de los otros list
        this.listaVariables.clearSelection();

        if (this.lista_variable_id_sujeto.getSelectedIndex() >= 0) {
            //Cambiamos el sentido del bot√≥n y lo habilitamos
            this.boton_cambiar_id_sujeto.setText("<");
            this.boton_cambiar_id_sujeto.setEnabled(true);
        } else {
            this.boton_cambiar_id_sujeto.setEnabled(false);
        }
    }//GEN-LAST:event_lista_variable_id_sujetoValueChanged

    private void boton_aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_aceptarActionPerformed
        this.variables_seleccionadas = new String[this.lista_variable_id_sujeto.getModel().getSize()];

        for(int i=0; i<this.lista_variable_id_sujeto.getModel().getSize(); i++) {
            this.variables_seleccionadas[i] = this.lista_variable_id_sujeto.getModel().getElementAt(i).toString();
        }

        for(int i=0; i<this.modelosExamenes.size(); i++) {
            calculaPuntajeAlumnoUA(i);
            
            opciones_respuesta = new ArrayList[this.variables_seleccionadas.length][this.modelosExamenes.get(i).getUnidades_aprendizaje().size()];
            frecuencias_distractores_ua = new ArrayList[this.variables_seleccionadas.length][this.modelosExamenes.get(i).getUnidades_aprendizaje().size()];
            puntaje_distractores_ua = new ArrayList[this.variables_seleccionadas.length][this.modelosExamenes.get(i).getUnidades_aprendizaje().size()];            
            promedio_distractores_ua = new ArrayList[this.variables_seleccionadas.length][this.modelosExamenes.get(i).getUnidades_aprendizaje().size()];
            porcentaje_distractores_ua = new ArrayList[this.variables_seleccionadas.length][this.modelosExamenes.get(i).getUnidades_aprendizaje().size()];

            for(int j=0; j<this.modelosExamenes.get(i).getNumero_de_examinados(); j++) {
                calcularPromedios(j, i);
            }

            this.modelosExamenes.get(i).setUnidadPorContexto_variables_seleccionadas(variables_seleccionadas);
            this.modelosExamenes.get(i).setUnidadPorContexto_opciones_respuesta(opciones_respuesta);
            this.modelosExamenes.get(i).setUnidadPorContexto_promedio_distractores(promedio_distractores_ua);
            this.modelosExamenes.get(i).setUnidadPorContexto_porcentaje_distractores(porcentaje_distractores_ua);

            if(this.mostrar_graficas.isSelected()) {
                crearGraficas(i);
            }

        }

        this.jDialog1.dispose();

        if(this.mostrar_graficas.isSelected()) {
            guardarImagenes();
        }

        pintar_resultados();

        this.toFront();
        this.show();
    }//GEN-LAST:event_boton_aceptarActionPerformed

    private void calcularPromedios(int indice_examinado, int indice_modelo_examen) {
        int indiceVar;
        String respuesta;
        
        for(int i=0; i<this.variables_seleccionadas.length; i++) {
            
            for(int j=0; j<this.modelosExamenes.get(indice_modelo_examen).getUnidades_aprendizaje().size(); j++) {
                if(opciones_respuesta[i][j]==null) {
                    List<String> opciones_temp = new ArrayList();
                    opciones_respuesta[i][j] = opciones_temp;
                }

                if(puntaje_distractores_ua[i][j]==null) {
                    List<Double> puntajes_temp = new ArrayList();
                    puntaje_distractores_ua[i][j] = puntajes_temp;
                }                        

                if(frecuencias_distractores_ua[i][j]==null) {
                    List<Integer> frecuencias_temp = new ArrayList();
                    frecuencias_distractores_ua[i][j] = frecuencias_temp;
                }

                if(promedio_distractores_ua[i][j]==null) {
                    List<Double> promedios_temp = new ArrayList();
                    promedio_distractores_ua[i][j] = promedios_temp;
                }

                if(porcentaje_distractores_ua[i][j]==null) {
                    List<Double> porcentajes_temp = new ArrayList();
                    porcentaje_distractores_ua[i][j] = porcentajes_temp;
                }

                indiceVar = this.modelosExamenes.get(indice_modelo_examen).getIndiceVar(this.variables_seleccionadas[i]);

                respuesta = this.modelosExamenes.get(indice_modelo_examen).getAlumnosOrdenada().get(indice_examinado).getRespuesta(indiceVar);

                if( !opciones_respuesta[i][j].contains(respuesta) ) {                    
                    opciones_respuesta[i][j].add(respuesta);
                    frecuencias_distractores_ua[i][j].add(new Integer(1));
                    puntaje_distractores_ua[i][j].add( (double) this.modelosExamenes.get(indice_modelo_examen).getAlumnosOrdenada().get(indice_examinado).getPuntajes_ua()[j] );
                    promedio_distractores_ua[i][j].add( (double) this.modelosExamenes.get(indice_modelo_examen).getAlumnosOrdenada().get(indice_examinado).getPuntajes_ua()[j] );
                    porcentaje_distractores_ua[i][j].add( ((double) this.modelosExamenes.get(indice_modelo_examen).getAlumnosOrdenada().get(indice_examinado).getPuntajes_ua()[j]/this.modelosExamenes.get(indice_modelo_examen).getUnidades_aprendizaje().get(j).getItems().size())*100 );
                } else {
                    int indice_respuesta = opciones_respuesta[i][j].indexOf(respuesta);

                    if(indice_respuesta!=-1) {
                        int cont = frecuencias_distractores_ua[i][j].get(indice_respuesta).intValue();
                        cont++;
                        frecuencias_distractores_ua[i][j].set(indice_respuesta, new Integer(cont));

                        double p_alumno = (double) this.modelosExamenes.get(indice_modelo_examen).getAlumnosOrdenada().get(indice_examinado).getPuntajes_ua()[j];
                        double p_total = puntaje_distractores_ua[i][j].get(indice_respuesta).doubleValue();
                        p_total += p_alumno;
                        puntaje_distractores_ua[i][j].set(indice_respuesta, p_total);

                        promedio_distractores_ua[i][j].set( indice_respuesta, puntaje_distractores_ua[i][j].get(indice_respuesta)/frecuencias_distractores_ua[i][j].get(indice_respuesta) );
                        porcentaje_distractores_ua[i][j].set( indice_respuesta, (promedio_distractores_ua[i][j].get(indice_respuesta)/this.modelosExamenes.get(indice_modelo_examen).getUnidades_aprendizaje().get(j).getItems().size())*100 );
                    } else {
                        System.out.println("Algo raro esta pasando");
                    }
                }
            }            
                        
        }
                
    }
    
    private void crearGraficas(int indice_modelo_examen) {
        boolean auto = false;
        unidadesPorContexto_graficas = new ArrayList<>();
        DecimalFormat df = new DecimalFormat("0.00");
        
        for(int i=0; i<this.modelosExamenes.get(indice_modelo_examen).getUnidadPorContexto_variables_seleccionadas().length; i++) {
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            
            for(int j=0; j<this.modelosExamenes.get(indice_modelo_examen).getUnidades_aprendizaje().size(); j++) {
                String nombre_ua = this.modelosExamenes.get(indice_modelo_examen).getUnidades_aprendizaje().get(j).getNombre();
                
                for(int k=0; k<this.modelosExamenes.get(indice_modelo_examen).getUnidadPorContexto_opciones_respuesta()[i][j].size(); k++) {
                    double valor = Double.valueOf(df.format(this.modelosExamenes.get(indice_modelo_examen).getUnidadPorContexto_porcentaje_distractores()[i][j].get(k)));                    
                    String op_esp = this.modelosExamenes.get(indice_modelo_examen).getUnidadPorContexto_opciones_respuesta()[i][j].get(k);
                    
                    dataset.setValue(valor, op_esp, nombre_ua);           
                }
                
            }            
            
            JFreeChart chart = ChartFactory.createBarChart(this.modelosExamenes.get(indice_modelo_examen).getUnidadPorContexto_variables_seleccionadas()[i], "Opciones de respuesta", "Porcentaje", dataset, PlotOrientation.VERTICAL, true, true, true);
            
            chart.setBackgroundPaint(Color.white);

            final CategoryPlot plot = (CategoryPlot) chart.getPlot();

            plot.setBackgroundPaint(new Color(240, 240, 240));
            plot.setRangeGridlinePaint(Color.darkGray);
            plot.setRangeGridlinesVisible(true);
            plot.setDomainGridlinePaint(Color.darkGray);

            final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
            rangeAxis.setUpperBound(105);

            // customise the renderer...
            final BarRenderer renderer = (BarRenderer) plot.getRenderer();        
            //renderer.setDrawShapes(true);            
            renderer.setMaximumBarWidth(.12);   
            renderer.setItemMargin(.015);
            
            for(int k=0; k<this.modelosExamenes.get(indice_modelo_examen).getUnidades_aprendizaje().size(); k++) {
                
                for(int j=0; j<this.modelosExamenes.get(indice_modelo_examen).getUnidadPorContexto_opciones_respuesta()[i][k].size(); j++) {  
                    renderer.setSeriesPaint(j, colores[j]);
                    renderer.setSeriesItemLabelGenerator(j, new StandardCategoryItemLabelGenerator());
                    renderer.setSeriesItemLabelsVisible(j, true);                        
                    renderer.setSeriesVisible(j, true);
                }
            }            
            
            plot.setRenderer(renderer);
              
            unidadesPorContexto_graficas.add(chart);
        }
        
        this.modelosExamenes.get(indice_modelo_examen).setUnidadPorContexto_graficas(unidadesPorContexto_graficas);
    }
    
    private void guardarImagenes() {
        File dir = new File("temp\\unidadesPorContexto");                
        
        if(dir.exists()) {
            borrarDirectorio(dir);                                   
        }
                
        if (dir.mkdirs()) {
            for(int i=0; i<this.modelosExamenes.size(); i++) {
                                                
                File dirModelo = new File("temp\\unidadesPorContexto\\" + this.modelosExamenes.get(i).getNombreModelo());                                                               
                
                if (dirModelo.mkdirs()) {
                    
                    for(int j=0; j<this.modelosExamenes.get(i).getUnidadPorContexto_graficas().size(); j++) {                                                 
                        
                        try {
                            ChartUtilities.saveChartAsPNG(
                                    new java.io.File("temp\\unidadesPorContexto\\" + this.modelosExamenes.get(i).getNombreModelo() + "\\" + (this.modelosExamenes.get(i).getUnidadPorContexto_graficas().get(j).getTitle().getText()) + ".PNG"),
                                    this.modelosExamenes.get(i).getUnidadPorContexto_graficas().get(j),
                                    650,
                                    350);                                                        
                            
                        } catch (java.io.IOException exc) {
                            JOptionPane.showMessageDialog(this, "Error al guardar las imagenes.", "Error", JOptionPane.ERROR_MESSAGE);                            

                        }
                                                
                    }
                    
                } else {
                    JOptionPane.showMessageDialog(this, "Error al crear el directorio del modelo.", "Error", JOptionPane.ERROR_MESSAGE);
                }
                
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error al crear el directorio temporal para imagenes.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        this.jDialog1.setVisible(false);        
    }
    
    private void borrarDirectorio(File directorio) {
        File[] ficheros = directorio.listFiles();
 
        for (int x=0;x<ficheros.length;x++) {
            
            if (ficheros[x].isDirectory()) {
                borrarDirectorio(ficheros[x]);
            }
            
            ficheros[x].delete();
        }
        
        directorio.delete();
    }

    private void pintar_resultados() {
        String out = "";
        DecimalFormat df = new DecimalFormat("0.00");
        
        for(int k=0; k<this.modelosExamenes.size(); k++) {            
        
            out = out +
                    "<table align=\"center\" width=\"800px\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">"
                    + "<caption style=\"font-weight:bold;\"> " + this.modelosExamenes.get(k).getNombreModelo() + "</caption>"
                    + "<tr>"
                        +  "<td style=\"text-align:center; font-weight:bold;\" rowspan=\"2\">Variable</td>";
            
            out = out + "<td style=\"text-align:center; font-weight:bold;\" rowspan=\"2\">Opci&oacute;n de respuesta</td>";
            out = out + "<td style=\"text-align:center; font-weight:bold;\" colspan=\"" + this.modelosExamenes.get(k).getUnidades_aprendizaje().size() + "\">Promedio</td>";
            out = out + "<td style=\"text-align:center; font-weight:bold;\" colspan=\"" + this.modelosExamenes.get(k).getUnidades_aprendizaje().size() + "\">Porcentaje</td>";
            out = out + "</tr>";    
            
            out = out + "<tr>";                 
                
            for(int i=0; i<this.modelosExamenes.get(k).getUnidades_aprendizaje().size(); i++) {
                out = out + "<td style=\"text-align:center;\">" + this.modelosExamenes.get(k).getUnidades_aprendizaje().get(i).getNombre() + "</td>";
            }

            for(int i=0; i<this.modelosExamenes.get(k).getUnidades_aprendizaje().size(); i++) {
                out = out + "<td style=\"text-align:center;\">" + this.modelosExamenes.get(k).getUnidades_aprendizaje().get(i).getNombre() + "</td>";
            }

            out = out + "</tr>";

            for(int i=0; i<this.modelosExamenes.get(k).getUnidadPorContexto_variables_seleccionadas().length; i++) {
                out = out + "<tr>";

                out = out + "<td style=\"text-align:center;\"";                
                out = out + " rowspan=\"" + this.modelosExamenes.get(k).getUnidadPorContexto_opciones_respuesta()[i][0].size() + "\">" + this.modelosExamenes.get(k).getUnidadPorContexto_variables_seleccionadas()[i] + "</td>";
                
                for(int j=0; j<this.modelosExamenes.get(k).getUnidadPorContexto_opciones_respuesta()[i][0].size(); j++) {
                                        
                    if(j!=0) {
                        out = out + "<tr>";
                    }                                        
                    
                    out = out + "<td>" + this.modelosExamenes.get(k).getUnidadPorContexto_opciones_respuesta()[i][0].get(j) + " </td>";
                    
                    for(int l=0; l<this.modelosExamenes.get(k).getUnidades_aprendizaje().size(); l++) {                        
                        out = out + "<td style=\"text-align:center;\">" + df.format(this.modelosExamenes.get(k).getUnidadPorContexto_promedio_distractores()[i][l].get(j).doubleValue()) + "</td>";
                    }
                    
                    for(int l=0; l<this.modelosExamenes.get(k).getUnidades_aprendizaje().size(); l++) {                        
                        out = out + "<td style=\"text-align:center;\">" + df.format(this.modelosExamenes.get(k).getUnidadPorContexto_porcentaje_distractores()[i][l].get(j).doubleValue()) + "%</td>";
                    }
                                                            
                    out = out + "</tr>";                                        
                }
                
                               
                
            }        

            out = out + "</table>";
            out = out + "<br /><br />";
            
            out = out +
                    "<table align=\"center\" width=\"800px\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">"
                    + "<caption style=\"text-align:center; font-weight:bold;\"> " + this.modelosExamenes.get(k).getNombreModelo() + "</caption>";
            
            for(int i=0; i<this.modelosExamenes.get(k).getUnidadPorContexto_graficas().size(); i++) {                                
                out = out + "<tr>"
                        +  "<td style=\"text-align:center; border:0;\">&nbsp;</td>";            

                out = out + "</tr>";            
                
                out = out + "<tr>";
                out = out + "<td style=\"text-align:center; border:0;\">";
                
                String nombreArchivo = "\"file:temp/unidadesPorContexto/" + this.modelosExamenes.get(k).getNombreModelo() + "/" + (this.modelosExamenes.get(k).getUnidadPorContexto_graficas().get(i).getTitle().getText()) + ".PNG\"";                                
                
                out = out + "<img src=" + nombreArchivo + " width=\"650\" height=\"350\" border=\"0\">";
                out = out + "</td>";
                out = out + "</tr>";            
                
                out = out + "<tr>";
                out = out + "<td style=\"text-align:center; border:0;\">";
                out = out + "&nbsp;";
                out = out + "</td>";
                out = out + "</tr>";  
                
                out = out + "<tr>";
                out = out + "<td style=\"text-align:center; border:0;\">";
                out = out + "&nbsp;";
                out = out + "</td>";
                out = out + "</tr>"; 
            }        

            out = out + "</table>";
            out = out + "<br /> <br />";
            
        }
                
        
        this.panel_resultados.setText(out); 
    }

    private void calculaPuntajeAlumnoUA(int indice_modelo) {
        for(int i=0; i<this.modelosExamenes.get(indice_modelo).getNumero_de_examinados(); i++) {
            int[] puntajes_ua = new int[this.modelosExamenes.get(indice_modelo).getUnidades_aprendizaje().size()];
            double[] porcentajes_ua = new double[this.modelosExamenes.get(indice_modelo).getUnidades_aprendizaje().size()];
            
            for(int j=0; j<this.modelosExamenes.get(indice_modelo).getUnidades_aprendizaje().size(); j++) {
                
                for(int k=0; k<this.modelosExamenes.get(indice_modelo).getUnidades_aprendizaje().get(j).getItems().size(); k++) {
                    String item = this.modelosExamenes.get(indice_modelo).getUnidades_aprendizaje().get(j).getItems().get(k);
                    int indice_item = this.modelosExamenes.get(indice_modelo).getIndiceItem(item);
                    System.out.println("HOLA :" + item + " - " + indice_item);
                    puntajes_ua[j] += this.modelosExamenes.get(indice_modelo).getAlumnosOrdenada().get(i).getRespuestaCalificada(indice_item);
                }
                
                porcentajes_ua[j] = (((double)puntajes_ua[j])/this.modelosExamenes.get(indice_modelo).getUnidades_aprendizaje().get(j).getItems().size())*100.0;
            }
            
            this.modelosExamenes.get(indice_modelo).getAlumnosOrdenada().get(i).setPuntajes_ua(puntajes_ua);
            this.modelosExamenes.get(indice_modelo).getAlumnosOrdenada().get(i).setPorcentajes_ua(porcentajes_ua);
        }
    }
    
    public JEditorPane getPanel_resultados() {
        return panel_resultados;
    }

    void mostrar() {
        this.jDialog1.setVisible(true);
    }
    
    private void boton_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_cancelarActionPerformed
        this.jDialog1.dispose();
    }//GEN-LAST:event_boton_cancelarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boton_aceptar;
    private javax.swing.JButton boton_cambiar_id_sujeto;
    private javax.swing.JButton boton_cancelar;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList listaVariables;
    private javax.swing.JList lista_variable_id_sujeto;
    private javax.swing.JCheckBox mostrar_graficas;
    private javax.swing.JEditorPane panel_resultados;
    // End of variables declaration//GEN-END:variables
}
